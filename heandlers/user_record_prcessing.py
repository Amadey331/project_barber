from sqlalchemy.ext.asyncio import AsyncSession

from aiogram.fsm.context import FSMContext

from scheduler import schedule_reminder


from kbds.inline_user import (
    get_service_categoty_for_record,
    get_main_inlineBtns_user,
    get_barbers_list_btns_for_record,
    get_services_list_btns_for_record,
    get_select_date_kb_for_record,
    get_select_time_kb_for_record,
    get_callback_btns,
    UserAddRecordCallBack,
    get_confirm_record_kb

)

from kbds.replay_user_kb import(
    get_send_number_kb_user
)



from aiogram.types import CallbackQuery

from database.orm_query import (
    orm_get_services,
    orm_get_barbers_by_service_id,
    orm_get_available_dates,
    orm_get_free_time_slots,
    orm_check_daily_limit,
    orm_add_appointment_user,
    orm_get_service_by_id,
    orm_get_barber_by_id,
    orm_get_user_by_id,
    orm_slot_exists_in_history,
    orm_save_to_history,
    orm_check_barber_slot_taken,
    orm_check_user_double_booking
    
    
)


from utils.paginator import Paginator


from aiogram.utils.keyboard import InlineKeyboardBuilder


from aiogram.types import InlineKeyboardButton,CallbackQuery


from datetime import datetime

from fsm.user import UserRecordStates

from aiogram.fsm.state import StatesGroup, State

from fsm.admin import AdminAddRecordFSM

from utils.plular_years import plural_years
from utils.format import format_rating

from datetime import datetime, timedelta


BARBER_SPECIALIZATIONS = {
    "classic_barber": "üíà –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –±–∞—Ä–±–µ—Ä",
    "beard_specialist": "üßî‚Äç‚ôÇÔ∏è –ë–æ—Ä–æ–¥–∏—Å—Ç",
    "stylist_barber": "üé® –°—Ç–∞–π–ª–∏—Å—Ç",
    "universal_barber": "üéØ –ë–∞—Ä–±–µ—Ä-—É–Ω–∏–≤–µ—Ä—Å–∞–ª"
}


def pages(paginator: Paginator):
    btns = dict()
    if paginator.has_previous():
        btns["‚óÄ –ü—Ä–µ–¥."] = "previous"

    if paginator.has_next():
        btns["–°–ª–µ–¥. ‚ñ∂"] = "next"

    return btns




async def record_service_category(session,level):
    text = "üìå –£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:"
    kbds = get_service_categoty_for_record(session, level)
    return text,kbds




async def record_select_barber(session, level, service_category, service_id, page):
    barbers = await orm_get_barbers_by_service_id(session, service_id)
    paginator = Paginator(barbers, page=page)

    if not paginator.get_page():
        text = "–ë–∞—Ä–±–µ—Ä—ã –¥–ª—è —ç—Ç–æ–π —É—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        kbds = get_main_inlineBtns_user()
        return text, None, kbds

    barber = paginator.get_page()[0]

    rating_text = format_rating(barber.rating_sum, barber.rating_count)

    text = f"""
<b>üë§ –ò–º—è –±–∞—Ä–±–µ—Ä–∞:</b> {barber.name}
üíº <b>–°—Ç–∞–∂:</b> {plural_years(barber.experience)}
üéØ <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {BARBER_SPECIALIZATIONS[barber.specialization]}
‚≠êÔ∏è <b>{rating_text}</b>
"""

    kbds = get_barbers_list_btns_for_record(
        level=level,
        service_category=service_category,
        service_id=service_id,
        barber_id=barber.id,
        page=page,
        pagination_btns=pages(paginator),
    )

    return text, barber.photo_path, kbds




async def record_service(session, level, service_category,  name_btn, page):

    
    services = await orm_get_services(session, service_category)
    if not services:
        text = "‚ö†Ô∏è –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥."
        kbds = InlineKeyboardBuilder()
        kbds.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥", 
            callback_data=UserAddRecordCallBack(level=0).pack()
        ))
        return text, kbds.as_markup()

    paginator = Paginator(services, page=page)
    service = paginator.get_page()[0]
    
    text = f"""
<b>üìå –£—Å–ª—É–≥–∞:</b> {service.service_name}
üí∞ <b>–¶–µ–Ω–∞:</b> {round(service.service_price, 2)} —Ä—É–±.
‚è≥ <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {service.service_duration} –º–∏–Ω.

<strong>–£—Å–ª—É–≥–∞ {paginator.page} –∏–∑ {paginator.pages}</strong>
"""

    pagination_btns = pages(paginator)

    kbds = get_services_list_btns_for_record(
        level=level,
        page= page,
        pagination_btns= pagination_btns,
        service_category = service_category,
        service_id= service.id
    )
    
    return text,kbds







async def record_select_date(
        session,
        level,
        service_category,
        service_id, 
        barber_id, 

):
    dates = await orm_get_available_dates(session, barber_id, service_id)

    if not dates:
        text = "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏", get_main_inlineBtns_user()
        return text

    text =  "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:"

    kbds = get_select_date_kb_for_record(
        dates=dates,
        level=level,
        service_category=service_category,
        service_id=service_id,
        barber_id=barber_id
    )



    return text, kbds




async def record_select_time(session, level, service_category, service_id, barber_id, date):
    date_obj = datetime.strptime(date, "%d.%m.%Y").date()
    slots = await orm_get_free_time_slots(session, barber_id, service_id, date_obj)

    if not slots:
        
        text = "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É"
        kbds = get_main_inlineBtns_user()
        return text,kbds
    kbds = get_select_time_kb_for_record(
        slots=slots,
        level=level,
        service_category=service_category,
        service_id=service_id,
        barber_id=barber_id,
        date=date
    )
    text = "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏:"
    return text, kbds





async def record_confirm_appointment(
    session: AsyncSession,
    level: int,
    service_category: str,
    service_id: int,
    barber_id: int,
    date: str,
    time: str,
    callback_query: CallbackQuery
):
    user = await orm_get_user_by_id(session, callback_query.from_user.id)
    if not user:
        return (
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ /start",
            get_main_inlineBtns_user()
        )

    # --- –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è ---
    try:
        date_obj = datetime.strptime(date, "%d.%m.%Y").date()
        time_obj = datetime.strptime(time.replace("_", ":"), "%H:%M").time()
    except Exception:
        return "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", get_main_inlineBtns_user()

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è ---
    now = datetime.now()
    appointment_datetime = datetime.combine(date_obj, time_obj)
    if appointment_datetime <= now:
        return "‚ùå –≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–∑–∂–µ —Ç–µ–∫—É—â–µ–≥–æ.", get_main_inlineBtns_user()

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —ç—Ç–æ –∂–µ –≤—Ä–µ–º—è ---
    double_booking = await orm_check_user_double_booking(
        session=session,
        phone=user.phone,
        date_=date_obj,
        time_=time_obj
    )
    if double_booking:
        return (
            "‚ùå –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —É—Å–ª—É–≥—É –≤ —ç—Ç–æ –≤—Ä–µ–º—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ª–æ—Ç.",
            get_main_inlineBtns_user()
        )

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ (—Ç–æ—Ç –∂–µ —Å–ª–æ—Ç —É–∂–µ –±—ã–ª) ---
    already_booked = await orm_slot_exists_in_history(
        session=session,
        phone=user.phone,
        date_=date_obj,
        time_=time_obj
    )
    if already_booked:
        return (
            "‚ùå –í—ã —É–∂–µ —Ä–∞–Ω–µ–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ª–æ—Ç.",
            get_main_inlineBtns_user()
        )

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –Ω–∞ –¥–µ–Ω—å ---
    limit_exceeded = await orm_check_daily_limit(session, phone=user.phone, date=date_obj)
    if limit_exceeded:
        return (
            "‚ùå –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ 2 —É—Å–ª—É–≥–∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å. –ù–µ–ª—å–∑—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –±–æ–ª—å—à–µ.",
            get_main_inlineBtns_user()
        )

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç –ª–∏ —Å–ª–æ—Ç —É –±–∞—Ä–±–µ—Ä–∞ ---
    slot_taken = await orm_check_barber_slot_taken(
        session=session,
        barber_id=barber_id,
        date_=date_obj,
        time_=time_obj
    )
    if slot_taken:
        return (
            "‚ùå –≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–º –±–∞—Ä–±–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.",
            get_main_inlineBtns_user()
        )

    # --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
    service = await orm_get_service_by_id(session, service_id)
    barber = await orm_get_barber_by_id(session, barber_id)
    if not service or not barber:
        return (
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            get_main_inlineBtns_user()
        )

    service_price = float(service.service_price) if service.service_price else 0.0

    text = (
        f"‚úÖ <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–ø–∏—Å–∏:</b>\n\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {date}\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {time.replace('_', ':')}\n"
        f"üíà <b>–ë–∞—Ä–±–µ—Ä:</b> {barber.name}\n"
        f"üõ† <b>–£—Å–ª—É–≥–∞:</b> {service.service_name}\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {round(service_price, 2)} ‚ÇΩ\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø–∏—Å—å."
    )

    kbds = get_confirm_record_kb(
        level=level,
        service_category=service_category,
        service_id=service_id,
        barber_id=barber_id,
        date=date,
        time=time
    )

    return text, kbds























async def record_save_appointment(
    session: AsyncSession,
    level: int,
    service_category: str,
    service_id: int,
    barber_id: int,
    date: str,
    time: str,
    callback_query: CallbackQuery
):
    user = await orm_get_user_by_id(session, callback_query.from_user.id)
    if not user:
        return (
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ /start",
            get_main_inlineBtns_user()
        )

    # --- –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è ---
    date_obj = datetime.strptime(date, "%d.%m.%Y").date()
    time_obj = datetime.strptime(time.replace("_", ":"), "%H:%M").time()
    appointment_datetime = datetime.combine(date_obj, time_obj)

    # --- –§–∏–Ω–∞–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É ---
    success, response_message, appointment_id = await orm_add_appointment_user(
        session=session,
        client_name=callback_query.from_user.full_name,
        phone=user.phone,
        date_str=date,
        time_str=time,
        service_id=service_id,
        barber_id=barber_id
    )

    if not success:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.\n\n{response_message}", get_main_inlineBtns_user()

    # --- –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é ---
    await orm_save_to_history(
        session=session,
        client_name=callback_query.from_user.full_name,
        phone=user.phone,
        date_=date_obj,
        time_=time_obj,
        service_id=service_id,
        barber_id=barber_id
    )

    # --- –î–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä–≤–∏—Å –∏ –±–∞—Ä–±–µ—Ä–∞ ---
    service = await orm_get_service_by_id(session, service_id)
    barber = await orm_get_barber_by_id(session, barber_id)

    service_name = service.service_name if service else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞"
    barber_name = barber.name if barber else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞—Ä–±–µ—Ä"

    # --- –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ---
    remind_time = appointment_datetime - timedelta(hours=1)
    reminder_text = (
        f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏!\n\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {appointment_datetime.strftime('%H:%M %d.%m.%Y')}\n"
        f"üíà <b>–ë–∞—Ä–±–µ—Ä:</b> {barber_name}\n"
        f"üõ† <b>–£—Å–ª—É–≥–∞:</b> {service_name}"
    )

    schedule_reminder(
        bot=callback_query.bot,
        chat_id=callback_query.message.chat.id,
        remind_time=remind_time,
        text=reminder_text,
        appointment_id=appointment_id
    )

    return response_message, get_main_inlineBtns_user()





async def get_add_record_menu_user(
        session: AsyncSession,
        level: int,
        service_category: str | None = None,
        service_id: int | None = None,
        barber_id: int | None = None,
        name_btn: str | None = None,
        page: int = 1,
        date: str | None = None,
        time: str | None = None,
        state: StatesGroup | None = None,
        callback_query: CallbackQuery | None = None,
):
    if level == 0:
        text, kbds = await record_service_category(session, level)
        return text, None, kbds
    if level == 1:
        text, kbds = await record_service(session, level, service_category, name_btn, page)
        return text, None, kbds
    if level == 2:
        return await record_select_barber(session, level, service_category, service_id, page)
    if level == 3:
        text, kbds = await record_select_date(session, level, service_category, service_id, barber_id)
        return text, None, kbds
    if level == 4:
        text, kbds = await record_select_time(session, level, service_category, service_id, barber_id, date)
        return text, None, kbds
    

    if level == 5:
        text, kbds = await record_confirm_appointment(
            session=session,
            level=level,
            service_category=service_category,
            service_id=service_id,
            barber_id=barber_id,
            date=date,
            time=time,
            callback_query=callback_query
        )
        return text, None, kbds


    if level == 6:
        text, kbds = await record_save_appointment(
            session=session,
            level=level,
            service_category=service_category,
            service_id=service_id,
            barber_id=barber_id,
            date=date,
            time=time,
            callback_query=callback_query
        )
        return text, None, kbds


    # if level == 5:
    #     user = await orm_get_user_by_id(session, callback_query.from_user.id)
    #     if not user:
    #         return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ /start", None, get_main_inlineBtns_user()

    #     await state.update_data(
    #         service_category=service_category,
    #         service_id=service_id,
    #         barber_id=barber_id,
    #         date=date,
    #         time=time,
    #         client_name=callback_query.from_user.full_name,
    #         phone=user.phone
    #     )

    #     text, kbds = await confirm_and_save_user_appointment(callback_query, state, session)
    #     return text, None, kbds





# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–∂–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def delete_last_message(env, data):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å."""
    if "last_msg_id" in data:
        
        chat_id = env.message.chat.id if isinstance(env, CallbackQuery) else env.chat.id
        bot = env.bot if isinstance(env, CallbackQuery) else env._bot
        
        try:

            await bot.delete_message(chat_id, data["last_msg_id"])
        except Exception:

            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

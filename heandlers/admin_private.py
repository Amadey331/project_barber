from aiogram import  types , Router, F
from aiogram.filters import CommandStart,Command, or_f, StateFilter
from aiogram.fsm.state import StatesGroup,State
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery,FSInputFile
from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.enums import ParseMode
from heandlers.admin_services_list_processing import get_admin_servives_list_content, pages
from heandlers.admin_add_record_processing import get_add_record_menu_admin
from heandlers.admin_view_slots_proccesing import get_view_slots_menu_admin

from sqlalchemy.ext.asyncio import AsyncSession

from filters.chat_types import ChatTypeFilter, IsAdmin

import re

import logging

from kbds.inline_admin import (
    get_callback_btns,
    AdminServicesListCallBack,
    AdminBarbersListCallback,
    AdminViewSlotsCallBack,
    AdminAddRecordCallBack,

    get_main_inlineBtns_admin,
    get_barbers_list_what_do_inline,
    get_barbers_list_btns_admin,
    get_weekday_selection_kb_admin,
    get_confirm_delete_barber_kb

)

from database.orm_query import (
    orm_add_admin_to_db,
    orm_log_admin_action,
    orm_get_admin_logs,
    get_admins_list,

    orm_get_admin_name_by_id,
    orm_del_admin_by_id,

    orm_add_service,
    orm_get_service_by_id,
    orm_update_service,

    orm_add_barber,
    orm_get_all_barbers,
    orm_get_barber_by_id,
    orm_update_barber_info,
    orm_delete_barber_by_id,

    orm_save_barber_schedule,
    orm_get_barber_schedule_by_id,
    orm_update_barber_schedule,

    orm_link_barber_to_service,
    orm_get_services_by_barber_id,
    orm_unlink_service_from_barber,

    orm_get_appointments_by_barber,
    orm_add_appontment_admin,
    orm_delete_appointment_by_id,
)

import re

from utils.paginator import Paginator
from utils.plular_years import plural_years

from datetime import date, timedelta, datetime

from fsm.admin import AdminAddRecordFSM,AdminDeleteRecordFSM

from utils.format import format_rating

from kbds.inline_user import get_main_inlineBtns_user

admin_private_router = Router()
admin_private_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())


# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è

# –ö–ª–∞—Å—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
class AddAdmin(StatesGroup):
    name = State()
    admin_id = State()

# –ö–ª–∞—Å—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–æ–¥–º–∏–Ω–∞
class DeleteAdmin(StatesGroup):
    admin_id = State()
    correct = State()


class AddBarbers(StatesGroup):
    name = State()
    phone = State()
    experience = State()
    specialization = State()
    photo = State()  
    schedule_action = State()
    work_days = State()
    work_time_input = State()


# –ö–ª–∞—Å—Å –¥–ª—è –¥–æ–±–æ–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏
class AddService(StatesGroup):
    name = State()
    price = State()
    duration = State()
    category = State()

    select_barber_to_link = State()

# –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–≤—è–∑–∫–∏ —É—Å–ª—É–≥–∏
class UnlinkServiceState(StatesGroup):
    choosing_service = State()




class AdminLogFSM(StatesGroup):
    waiting_for_start_date = State()
    waiting_for_end_date = State()
    viewing_logs = State()


SERVICE_CATEGORIES_REVERSED = {
    "haircut": "‚úÇÔ∏è –°—Ç—Ä–∏–∂–∫–∏",
    "beard": "üßî –ë–æ—Ä–æ–¥–∞ –∏ –±—Ä–∏—Ç—å—ë",
    "care": "üíÜ‚Äç‚ôÇÔ∏è –£—Ö–æ–¥ –∑–∞ –≤–æ–ª–æ—Å–∞–º–∏ –∏ –∫–æ–∂–µ–π",
    "styling": "üé≠ –°—Ç–∞–π–ª–∏–Ω–≥",
    "combo": "üéü –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —É—Å–ª—É–≥–∏"}

BARBER_SPECIALIZATIONS = {
    "classic_barber": "üíà –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –±–∞—Ä–±–µ—Ä",
    "beard_specialist": "üßî‚Äç‚ôÇÔ∏è –ë–æ—Ä–æ–¥–∏—Å—Ç",
    "stylist_barber": "üé® –°—Ç–∞–π–ª–∏—Å—Ç",
    "universal_barber": "üéØ –ë–∞—Ä–±–µ—Ä-—É–Ω–∏–≤–µ—Ä—Å–∞–ª"
}

WEEKDAY_LABELS = {
    0: "–ü–Ω",
    1: "–í—Ç",
    2: "–°—Ä",
    3: "–ß—Ç",
    4: "–ü—Ç",
    5: "–°–±",
    6: "–í—Å"
}
# –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

@admin_private_router.message(Command("admin"))
async def get_admin_kbds(message: types.Message, state:FSMContext):

    await message.delete()

    
    sent_message = await message.answer(":–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=get_main_inlineBtns_admin())
    await state.update_data(last_msg_id=sent_message.message_id)










# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∞–¥–∏–º–∏–Ω–æ–º
@admin_private_router.callback_query(F.data == "add_recod_admin")
async def add_record_admin(callback_query: CallbackQuery, session: AsyncSession):
    result = await get_add_record_menu_admin(session, level=0)

    sent_message = await safe_edit_or_send_new(
        bot=callback_query.bot,
        message=callback_query.message,
        text=result["text"],
        photo_path=result["photo"],
        kb=result["kb"]
    )

    await callback_query.answer()



@admin_private_router.callback_query(AdminAddRecordCallBack.filter())
async def add_record_menu_admin(callback_query: CallbackQuery, callback_data: AdminAddRecordCallBack, state: FSMContext, session: AsyncSession):
    result = await get_add_record_menu_admin(
        session=session,
        level=callback_data.level,
        service_category=callback_data.service_category,
        service_id=callback_data.service_id,
        barber_id=callback_data.barber_id,
        name_btn=callback_data.name_btn,
        page=callback_data.page,
        date=callback_data.date,
        time=callback_data.time,
        state=state
    )

    if callback_data.level == 5:
        # –ø–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ
        data = await state.get_data()
        try:
            if "last_msg_id" in data:
                await callback_query.bot.delete_message(callback_query.message.chat.id, data["last_msg_id"])
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏–º–µ–Ω–∏: {e}")

        # –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ
        sent_message = await callback_query.message.answer(
            result["text"],
            reply_markup=result["kb"]
        )

        await state.update_data(last_msg_id=sent_message.message_id)
        await callback_query.answer()
        return
    sent_message = await safe_edit_or_send_new(
        bot=callback_query.bot,
        message=callback_query.message,
        text=result["text"],
        photo_path=result["photo"],
        kb=result["kb"]
    )

    await state.update_data(last_msg_id=sent_message.message_id)
    await callback_query.answer()



@admin_private_router.message(AdminAddRecordFSM.waiting_for_client_name)
async def process_client_name(message: types.Message, state: FSMContext):
    data = await state.get_data()

    # —É–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞"
    try:
        if "last_msg_id" in data:
            await message.bot.delete_message(message.chat.id, data["last_msg_id"])
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∏–º–µ–Ω–∏: {e}")

    # —É–¥–∞–ª—è–µ–º —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç–≤–µ—Ç
    try:
        await message.delete()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    await state.update_data(client_name=message.text)

    # –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –Ω–æ–º–µ—Ä
    msg = await message.answer(
        "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ (–ø—Ä–∏–º–µ—Ä 79672636102):"
    )

    await state.update_data(last_msg_id=msg.message_id)
    await state.set_state(AdminAddRecordFSM.waiting_for_client_phone)



@admin_private_router.message(AdminAddRecordFSM.waiting_for_client_phone)
async def process_client_phone(message: types.Message, state: FSMContext, session: AsyncSession):
    await state.update_data(phone=message.text)
    data = await state.get_data()

    # —É–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø—Ä–æ —Ç–µ–ª–µ—Ñ–æ–Ω
    try:
        if "last_msg_id" in data:
            await message.bot.delete_message(message.chat.id, data["last_msg_id"])
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")

    # —É–¥–∞–ª—è–µ–º —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç–≤–µ—Ç
    try:
        await message.delete()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    # –¥–∞–ª–µ–µ –≤—Å—ë –∫–∞–∫ –µ—Å—Ç—å
    date_obj = datetime.strptime(data["date"], "%d.%m.%Y").date()
    time_obj = datetime.strptime(data["time"].replace("_", ":"), "%H:%M").time()

    result_text, service_name, barber_name = await orm_add_appontment_admin(session, data, date_obj, time_obj)

    if service_name and barber_name:
        await orm_log_admin_action(
            session=session,
            admin_id=message.from_user.id,
            action="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏",
            description=(
                f"–ó–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞ '{data['client_name']}' –Ω–∞ {data['date']} {data['time']} "
                f"–∫ –±–∞—Ä–±–µ—Ä—É '{barber_name}' –Ω–∞ —É—Å–ª—É–≥—É '{service_name}'"
            )
        )

    msg = await message.answer(result_text, reply_markup=get_main_inlineBtns_admin())
    await state.update_data(last_msg_id=msg.message_id)
    await state.clear()

















# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# –°–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤ –Ω–∞ –∫–æ–Ω–µ–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –ø–æ –±–∞—Ä–±–µ—Ä—É



@admin_private_router.callback_query(F.data == "view_slots_admin")
async def view_slots_admin(callback_query: CallbackQuery, session: AsyncSession):
    result = await get_view_slots_menu_admin(session, level=0)

    sent_msg = await safe_edit_or_send_new(
        bot=callback_query.bot,
        message=callback_query.message,
        text=result["text"],
        photo_path=result["photo"],
        kb=result["kb"]
    )
    await callback_query.answer()



@admin_private_router.callback_query(AdminViewSlotsCallBack.filter())
async def view_slots_menu_admin(callback_query: CallbackQuery, callback_data: AdminViewSlotsCallBack, state: StatesGroup, session: AsyncSession):
    result = await get_view_slots_menu_admin(
        session=session,
        level=callback_data.level,
        barber_id=callback_data.barber_id,
        barber_name=callback_data.barber_name,
        page=callback_data.page,
        date=callback_data.date,
        state=state
    )

    sent_msg = await safe_edit_or_send_new(
        bot=callback_query.bot,
        message=callback_query.message,
        text=result["text"],
        photo_path=result["photo"],
        kb=result["kb"]
    )

    await state.update_data(last_msg_id=sent_msg.message_id)
    await callback_query.answer()


@admin_private_router.message(AdminDeleteRecordFSM.appointment_id)
async def view_slots_delete_admin(message: types.Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ –±—ã–ª–æ
    try:
        if "last_msg_id" in data:
            await message.bot.delete_message(message.chat.id, data["last_msg_id"])
    except Exception as e:
        logging.warning(f"[ADMIN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º ID: {e}")

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç–≤–µ—Ç (—Å–∞–º ID)
    try:
        await message.delete()
    except Exception as e:
        logging.warning(f"[ADMIN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    # –ü–∞—Ä—Å–∏–Ω–≥ ID
    try:
        appointment_id = int(message.text.strip())
    except ValueError:
        sent = await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
        await state.update_data(last_msg_id=sent.message_id)
        return

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
    deleted = await orm_delete_appointment_by_id(session, appointment_id)
    admin_id = message.from_user.id

    if deleted:
        sent = await message.answer(
            f"‚úÖ –ó–∞–ø–∏—Å—å —Å ID <code>{appointment_id}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
            reply_markup=get_main_inlineBtns_admin(),
            parse_mode="HTML"
        )

        await orm_log_admin_action(
            session=session,
            admin_id=admin_id,
            action="–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏",
            description=f"–£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å ID {appointment_id}"
        )

    else:
        sent = await message.answer(
            f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å —Å ID <code>{appointment_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            parse_mode="HTML"
        )

        await orm_log_admin_action(
            session=session,
            admin_id=admin_id,
            action="–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏",
            description=f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å —Å ID {appointment_id}"
        )

    
    await state.clear()

    await state.update_data(last_msg_id=sent.message_id)

















# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
@admin_private_router.callback_query(F.data == "edit")
async def edit(callback_query: CallbackQuery, session: AsyncSession):
    await callback_query.answer()
    await safe_edit_or_send_new(
        bot=callback_query.bot,
        message=callback_query.message,
        text="–ß—Ç–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?",
        kb=get_callback_btns(btns={
            "üíº –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥": "edit_servisec_what_do",
            "‚úÇÔ∏è –ë–∞—Ä–±–µ—Ä—ã": "edit_barbers_what_do",
            "üîô –û—Ç–º–µ–Ω–∞": "cancel_admin"
        })
    )
    

# –í—ã–±–æ—Ä —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å–æ —Å–ø–∏—Å–∫–æ–º –±–∞—Ä–±–µ—Ä–æ–≤
@admin_private_router.callback_query(F.data == "edit_barbers_what_do")
async def edit_barbers_what_do(callback_query: CallbackQuery, session: AsyncSession):
    await callback_query.answer()
    await safe_edit_or_send_new(
        bot=callback_query.bot,
        message=callback_query.message,
        text="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–æ —Å–ø–∏—Å–∫–æ–º –±–∞—Ä–±–µ—Ä–æ–≤?",
        kb=get_barbers_list_what_do_inline()
    )


# –ù–∞—á–∞–ª–æ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞—Ä–±–µ—Ä–∞
@admin_private_router.callback_query(F.data == "add_barber")
async def add_barber(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    await callback_query.answer()
    
    text = (
        "üÜï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–∞—Ä–±–µ—Ä–∞</b>\n\n"
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>–∏–º—è –±–∞—Ä–±–µ—Ä–∞</b> üìù"
    )
    
    sent_message = await safe_edit_or_send_new(
        bot=callback_query.bot,
        message=callback_query.message,
        text=text,
        kb=get_callback_btns(btns={"‚ùå –û—Ç–º–µ–Ω–∞": "cancel_admin"})
    )

    await state.update_data(last_msg_id=sent_message.message_id)
    await state.set_state(AddBarbers.name)
    await state.update_data(obj=None)


# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –±–∞—Ä–±–µ—Ä–∞
@admin_private_router.message(AddBarbers.name, F.text)
async def add_barber_name(message: types.Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    obj = data.get("obj")

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await delete_last_message(message, data)

    # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–æ)
    try:
        await message.delete()
    except Exception:
        pass

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    if obj and message.text.strip() == ".":
        name = obj.name
    else:
        name = message.text.strip()

    await state.update_data(name=name)

    # –ì–æ—Ç–æ–≤–∏–º —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    if obj:
        text = (
            f"üìû <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±–∞—Ä–±–µ—Ä–∞</b>, —Ç–µ–∫—É—â–∏–π: <code>{obj.phone}</code>\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>.</code>, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.\n"
            "–§–æ—Ä–º–∞—Ç: —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä <code>79622718309</code> üìù"
        )
    else:
        text = (
            "üìû <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±–∞—Ä–±–µ—Ä–∞</b> –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>79622718309</code> üìù"
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    sent_message = await message.bot.send_message(
        chat_id=message.chat.id,
        text=text,
        reply_markup=get_callback_btns(btns={"‚ùå –û—Ç–º–µ–Ω–∞": "cancel_admin"}),
        parse_mode="HTML"
    )

    await state.update_data(last_msg_id=sent_message.message_id)
    await state.set_state(AddBarbers.phone)




# –û–±—Ä–æ–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π
@admin_private_router.message(AddBarbers.name)
async def add_barber_name_err(message: types.Message, state: FSMContext):
    data = await state.get_data()

    await delete_last_message(message, data)
    try:
        await message.delete()
    except Exception:
        pass

    sent_message = await message.bot.send_message(
        chat_id=message.chat.id,
        text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–º–µ–Ω–∏ –±–∞—Ä–±–µ—Ä–∞.\n\n‚úèÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
        reply_markup=get_callback_btns(btns={"‚ùå –û—Ç–º–µ–Ω–∞": "cancel_admin"}),
        parse_mode="HTML"
    )

    await state.update_data(last_msg_id=sent_message.message_id)




# –î–æ–±–∞–≤–ª–µ–Ω–∏–µy –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±–∞—Ä–±–µ—Ä–∞
@admin_private_router.message(AddBarbers.phone, F.text)
async def add_barber_phone(message: types.Message, state: FSMContext):
    data = await state.get_data()
    obj = data.get("obj")
    text = message.text.strip()

    if obj and text == ".":
        phone = obj.phone
    elif text.isdigit():
        phone = text
    else:
        return await add_barber_phone_err(message, state)

    await state.update_data(phone=phone)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await delete_last_message(message, data)
    try:
        await message.delete()
    except Exception:
        pass

    exp_text = f", —Ç–µ–∫—É—â–µ–µ: <b>{obj.experience}</b> (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>.</code> —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å)" if obj else ":"

    sent_message = await message.bot.send_message(
        chat_id=message.chat.id,
        text=f"‚è≥ <b>–í–≤–µ–¥–∏—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –≥–æ–¥–∞—Ö</b> (–µ—Å–ª–∏ –º–µ–Ω—å—à–µ –≥–æ–¥–∞ ‚Äî 0){exp_text}",
        reply_markup=get_callback_btns(btns={"‚ùå –û—Ç–º–µ–Ω–∞": "cancel_admin"}),
        parse_mode="HTML"
    )

    await state.update_data(last_msg_id=sent_message.message_id)
    await state.set_state(AddBarbers.experience)



# –û—à–∏–±–∫–∞, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω—ã–π
@admin_private_router.message(AddBarbers.phone)
async def add_barber_phone_err(message: types.Message, state: FSMContext):
    data = await state.get_data()

    await delete_last_message(message, data)
    try:
        await message.delete()
    except Exception:
        pass

    sent_message = await message.bot.send_message(
        chat_id=message.chat.id,
        text="‚ùå <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä</b> (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä <code>79622718309</code>):",
        reply_markup=get_callback_btns(btns={"‚ùå –û—Ç–º–µ–Ω–∞": "cancel_admin"}),
        parse_mode="HTML"
    )

    await state.update_data(last_msg_id=sent_message.message_id)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã –±–∞—Ä–±–µ—Ä–∞
@admin_private_router.message(AddBarbers.experience, F.text)
async def add_barber_experience(message: types.Message, state: FSMContext):
    data = await state.get_data()
    obj = data.get("obj")
    text = message.text.strip()

    if obj and text == ".":
        experience = obj.experience
    elif text.isdigit() and int(text) >= 0:
        experience = int(text)
    else:
        return await add_barber_experience_err(message, state)

    await state.update_data(experience=experience)
    await delete_last_message(message, data)
    try:
        await message.delete()
    except Exception:
        pass

    specialization_name = BARBER_SPECIALIZATIONS.get(obj.specialization) if obj and obj.specialization else None

    msg_text = "üìå <b>–£–∫–∞–∂–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞—Ä–±–µ—Ä–∞</b> üß≠"
    if specialization_name:
        msg_text += f"\n(–¢–µ–∫—É—â–∞—è: <code>{specialization_name}</code>, –Ω–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –¥—Ä—É–≥—É—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ)"

    sent_message = await message.bot.send_message(
        chat_id=message.chat.id,
        text=msg_text,
        reply_markup=get_callback_btns(btns={
            "üíà –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –±–∞—Ä–±–µ—Ä": "classic_barber",
            "üßî‚Äç‚ôÇÔ∏è –ë–æ—Ä–æ–¥–∏—Å—Ç": "beard_specialist",
            "üé® –°—Ç–∞–π–ª–∏—Å—Ç": "stylist_barber",
            "üéØ –ë–∞—Ä–±–µ—Ä-—É–Ω–∏–≤–µ—Ä—Å–∞–ª": "universal_barber",
            "‚ùå –û—Ç–º–µ–Ω–∞": "cancel_admin"
        }),
        parse_mode="HTML"
    )

    await state.update_data(last_msg_id=sent_message.message_id)
    await state.set_state(AddBarbers.specialization)


# –û—à–∏–±–∫–∞, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π
@admin_private_router.message(AddBarbers.experience)
async def add_barber_experience_err(message: types.Message, state: FSMContext):
    await delete_last_message(message, await state.get_data())
    try:
        await message.delete()
    except Exception:
        pass

    sent_message = await message.bot.send_message(
        chat_id=message.chat.id,
        text="‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (—Ç–æ–ª—å–∫–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä <code>3</code>):",
        reply_markup=get_callback_btns(btns={"‚ùå –û—Ç–º–µ–Ω–∞": "cancel_admin"}),
        parse_mode="HTML"
    )
    await state.update_data(last_msg_id=sent_message.message_id)


@admin_private_router.callback_query(AddBarbers.specialization, F.data)
async def add_admin_specialization(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    await delete_last_message(callback_query, await state.get_data())
    await state.update_data(specialization=callback_query.data)

    data = await state.get_data()
    obj = data.get("obj")

    text = (
        "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –±–∞—Ä–±–µ—Ä–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ \".\" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ) üñºÔ∏è"
        if obj else
        "üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –±–∞—Ä–±–µ—Ä–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ \".\" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å) üñºÔ∏è"
    )

    sent_message = await callback_query.message.bot.send_message(
        chat_id=callback_query.message.chat.id,
        text=text,
        reply_markup=get_callback_btns(btns={"‚ùå –û—Ç–º–µ–Ω–∞": "cancel_admin"})
    )

    await state.update_data(last_msg_id=sent_message.message_id)
    await state.set_state(AddBarbers.photo)
    await callback_query.answer()

@admin_private_router.message(AddBarbers.photo)
async def add_barber_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    obj = data.get("obj")

    await delete_last_message(message, data)
    try:
        await message.delete()
    except Exception:
        pass

    photo_path = None

    if message.text and message.text.strip() == ".":
        photo_path = obj.photo_path if obj else None
    elif message.photo:
        photo = message.photo[-1]
        file = await message.bot.get_file(photo.file_id)
        photo_bytes = await message.bot.download_file(file.file_path)

        import os
        os.makedirs("barber_photos", exist_ok=True)
        photo_path = f"barber_photos/{message.from_user.id}_{photo.file_unique_id}.jpg"
        with open(photo_path, "wb") as f:
            f.write(photo_bytes.getvalue())
    else:
        sent = await message.bot.send_message(
            chat_id=message.chat.id,
            text="‚ö†Ô∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ \".\" –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.",
            reply_markup=get_callback_btns(btns={"‚ùå –û—Ç–º–µ–Ω–∞": "cancel_admin"})
        )
        await state.update_data(last_msg_id=sent.message_id)
        return

    await state.update_data(photo_path=photo_path)

    # –ü–µ—Ä–µ—Ö–æ–¥ –¥–∞–ª—å—à–µ
    if obj:
        sent = await message.bot.send_message(
            chat_id=message.chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –±–∞—Ä–±–µ—Ä–∞:",
            reply_markup=get_callback_btns(btns={
                "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫": "edit_schedule",
                "‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å": "keep_schedule"
            })
        )
        await state.update_data(last_msg_id=sent.message_id)
        await state.set_state(AddBarbers.schedule_action)
    else:
        sent = await message.bot.send_message(
            chat_id=message.chat.id,
            text="<b>üìÖ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –≤ –∫–æ—Ç–æ—Ä—ã–µ –±–∞—Ä–±–µ—Ä –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.",
            reply_markup=get_weekday_selection_kb_admin(),
            parse_mode="HTML"
        )
        await state.update_data(last_msg_id=sent.message_id)
        await state.set_state(AddBarbers.work_days)





@admin_private_router.callback_query(AddBarbers.work_days)
async def handle_day_selection(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    data_btn = callback_query.data
    data = await state.get_data()

    await delete_last_message(callback_query, data)

    if data_btn == "cancel_admin":
        await state.clear()
        await callback_query.answer()
        sent = await callback_query.message.bot.send_message(
            chat_id=callback_query.message.chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_inlineBtns_admin()
        )
        await state.update_data(last_msg_id=sent.message_id)
        return

    if data_btn.startswith("day_"):
        weekday = int(data_btn.split("_")[1])
        await state.update_data(current_weekday=weekday)

        sent = await callback_query.message.bot.send_message(
            chat_id=callback_query.message.chat.id,
            text=f"üïí <b>–í–≤–µ–¥–∏—Ç–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –¥–ª—è {WEEKDAY_LABELS[weekday]}</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00-19:00):",
            reply_markup=get_callback_btns(btns={"‚ùå –û—Ç–º–µ–Ω–∞": "cancel_admin"}),
            parse_mode="HTML"
        )
        await state.update_data(last_msg_id=sent.message_id)
        await state.set_state(AddBarbers.work_time_input)
        await callback_query.answer()
        return

    elif data_btn == "weekday_selection_done":
        schedule = data.get("work_schedule", {})

        if not schedule:
            await callback_query.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–Ω—è!", show_alert=True)
            return

        obj = data.get("obj")
        if obj:
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–∞—Ä–±–µ—Ä–∞
            await orm_update_barber_info(data, session)
            await orm_update_barber_schedule(session, obj.id, schedule)

            await orm_log_admin_action(
                session=session,
                admin_id=callback_query.from_user.id,
                action="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞—Ä–±–µ—Ä–∞",
                description=f"–û–±–Ω–æ–≤–ª—ë–Ω –±–∞—Ä–±–µ—Ä: {data['name']}, —Ç–µ–ª–µ—Ñ–æ–Ω: {data['phone']}, –æ–ø—ã—Ç: {data['experience']}, ID: {obj.id}"
            )

            message = f"‚úÖ –ë–∞—Ä–±–µ—Ä <b>{data['name']}</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!\n\n"
        else:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–∞—Ä–±–µ—Ä–∞
            barber_id, message = await orm_add_barber(data, session)
            await state.update_data(barber_id=barber_id)
            await orm_save_barber_schedule(session, barber_id, schedule)

            if barber_id:
                await orm_log_admin_action(
                    session=session,
                    admin_id=callback_query.from_user.id,
                    action="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞—Ä–±–µ—Ä–∞",
                    description=f"–î–æ–±–∞–≤–ª–µ–Ω –±–∞—Ä–±–µ—Ä: {data['name']}, —Ç–µ–ª–µ—Ñ–æ–Ω: {data['phone']}, –æ–ø—ã—Ç: {data['experience']}, ID: {barber_id}"
                )
            else:
                await orm_log_admin_action(
                    session=session,
                    admin_id=callback_query.from_user.id,
                    action="–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –±–∞—Ä–±–µ—Ä–∞",
                    description=f"–ë–∞—Ä–±–µ—Ä —Å –∏–º–µ–Ω–µ–º '{data['name']}' –∏ –Ω–æ–º–µ—Ä–æ–º '{data['phone']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
                )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
        message += "<b>–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –±–∞—Ä–±–µ—Ä–∞:</b>\n\n"
        for day, time in sorted(schedule.items()):
            message += f"üìÖ {WEEKDAY_LABELS[day]} ‚Äî {time}\n"

        message += "\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–æ —Å–ø–∏—Å–∫–æ–º –±–∞—Ä–±–µ—Ä–æ–≤?"

        sent = await callback_query.message.bot.send_message(
            chat_id=callback_query.message.chat.id,
            text=message,
            reply_markup=get_barbers_list_what_do_inline(),
            parse_mode="HTML"
        )
        
        await state.clear()
        await state.update_data(last_msg_id=sent.message_id)
        await callback_query.answer()



@admin_private_router.message(AddBarbers.work_time_input)
async def input_time(message: types.Message, state: FSMContext):
    text = message.text.strip()

    if not re.match(r"^\d{1,2}:\d{2}-\d{1,2}:\d{2}$", text):
        await delete_last_message(message, await state.get_data())
        await message.delete()

        sent_msg = await message.bot.send_message(
            chat_id=message.chat.id,
            text="‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –∫–∞–∫: <code>10:00-18:00</code>",
            reply_markup=get_callback_btns(btns={"‚ùå –û—Ç–º–µ–Ω–∞": "cancel_admin"}),
            parse_mode="HTML"
        )
        await state.update_data(last_msg_id=sent_msg.message_id)
        return

    data = await state.get_data()
    weekday = data.get("current_weekday")
    schedule = data.get("work_schedule", {})
    schedule[weekday] = text
    await state.update_data(work_schedule=schedule)

    await delete_last_message(message, data)
    try:
        await message.delete()
    except Exception:
        pass

    schedule_lines = ""
    for day, time in sorted(schedule.items()):
        schedule_lines += f"üìÖ {WEEKDAY_LABELS[day]} ‚Äî {time}\n"

    if not schedule_lines:
        schedule_lines = "‚è≥ –ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ."

    final_text = (
        "<b>‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚úÖ –ì–æ—Ç–æ–≤–æ:</b>\n\n"
        "<b>–í–∞—à —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫:</b>\n"
        f"{schedule_lines}"
    )

    sent_msg = await message.bot.send_message(
        chat_id=message.chat.id,
        text=final_text,
        reply_markup=get_weekday_selection_kb_admin(),
        parse_mode="HTML"
    )
    await state.update_data(last_msg_id=sent_msg.message_id)
    await state.set_state(AddBarbers.work_days)





# –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Å –±–∞—Ä–±–µ—Ä–∞–º–∏

@admin_private_router.callback_query(AdminBarbersListCallback.filter())
async def admin_barbers_list_menu(callback_query: CallbackQuery, state: FSMContext,  callback_data: AdminBarbersListCallback, session: AsyncSession):
    data = await state.get_data()
    await delete_last_message(callback_query, data)
    if callback_data.name_btn == "delete":
        barber = await orm_get_barber_by_id(session, callback_data.barber_id)
        if not barber:
            await callback_query.answer("‚ö†Ô∏è –ë–∞—Ä–±–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return

        text = (
            f"‚ö†Ô∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–∞—Ä–±–µ—Ä–∞:</b> <code>{barber.name}</code>?\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ."
        )

        sent_message = await safe_edit_or_send_new(
            bot=callback_query.bot,
            message=callback_query.message,
            text=text,
            kb=get_confirm_delete_barber_kb(barber.id)
        )
        
        await state.update_data(last_msg_id=sent_message.message_id)
        await callback_query.answer()
        return
    
    
    if callback_data.name_btn == 'edit':
        obj = await orm_get_barber_by_id(session, callback_data.barber_id)
        await state.update_data(obj=obj)
        text = (
            f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –±–∞—Ä–±–µ—Ä–∞, —Ç–µ–∫—É—â–µ–µ: <b>{obj.name}</b> "
            "(–û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>.</code>, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å) üìùüìùüìù"
        )
        sent_message = await safe_edit_or_send_new(
            bot=callback_query.bot,
            message=callback_query.message,
            text=text,
            kb=get_callback_btns(btns={"‚ùå –û—Ç–º–µ–Ω–∞": "cancel_admin"})
        )
        
        await state.set_state(AddBarbers.name)
        await state.update_data(last_msg_id=sent_message.message_id)
        await callback_query.answer()
        return

    if callback_data.name_btn == "unlink_service":
        services = await orm_get_services_by_barber_id(session, callback_data.barber_id)

        if not services:
            await callback_query.answer("‚ùå –£—Å–ª—É–≥–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã.")
            return

        text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Å–ª—É–≥–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∏:</b>\n\n"
        for i, service in enumerate(services, start=1):
            text += f"{i}. {service.service_name} ({service.service_duration} –º–∏–Ω ‚Äî {round(service.service_price, 2)}‚ÇΩ)\n"

        await state.update_data(barber_id=callback_data.barber_id, services=services)

        sent_msg = await safe_edit_or_send_new(
            bot=callback_query.bot,
            message=callback_query.message,
            text=text + "\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —É—Å–ª—É–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å.",
            kb=get_callback_btns(btns={"‚ùå –û—Ç–º–µ–Ω–∞": "cancel_admin"})
        )

        await state.set_state(UnlinkServiceState.choosing_service)
        await state.update_data(last_msg_id=sent_msg.message_id)
        await callback_query.answer()
        return

    barbers = await orm_get_all_barbers(session)
    paginator = Paginator(barbers, page=callback_data.page)

    
    
    if not paginator.get_page():
        await callback_query.answer("‚ö†Ô∏è –ë–∞—Ä–±–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    barber = paginator.get_page()[0]
    rating_text = format_rating(barber.rating_sum, barber.rating_count)
    text = (
    f"<b>üë§ –ò–º—è –±–∞—Ä–±–µ—Ä–∞:</b> {barber.name}\n"
    f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{barber.phone}</code>\n"
    f"üíº <b>–°—Ç–∞–∂:</b> {plural_years(barber.experience)}\n"
    f"üéØ <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {BARBER_SPECIALIZATIONS[barber.specialization]}\n"
    f"‚≠êÔ∏è <b>{rating_text}</b>\n"
)
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –±–∞—Ä–±–µ—Ä–∞
    schedule = await orm_get_barber_schedule_by_id(session, barber.id)
    if schedule:
        text += "\n<b>üìÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b>\n"
        for weekday in sorted(schedule):
            start, end = schedule[weekday]
            text += f"‚Ä¢ {WEEKDAY_LABELS[weekday]} ‚Äî {start.strftime('%H:%M')}‚Äì{end.strftime('%H:%M')}\n"
    else:
        text += "\nüìÖ <i>–ì—Ä–∞—Ñ–∏–∫ –Ω–µ –∑–∞–¥–∞–Ω</i>\n"
    text+= f"\n<b>üî¢ –ë–∞—Ä–±–µ—Ä {paginator.page} –∏–∑ {paginator.pages}</b>"
    kbds = get_barbers_list_btns_admin(
        page=callback_data.page,
        pagination_btns=pages(paginator),
        barber_id=barber.id
    )
    # –ü–æ–ª—É—á–µ–≥–∏–µ —É—Å–ª—É–≥ —Å —Å –∫–æ—Ç—Ä—ã–º–∏ —Å–≤—è–∑–∞–Ω —ç—Ç–æ—Ç –±–∞—Ä–±–µ—Ä
    services = await orm_get_services_by_barber_id(session, barber.id)
    if services:
        text += "\n<b>üõ† –£—Å–ª—É–≥–∏ –±–∞—Ä–±–µ—Ä–∞:</b>\n"
        for service in services:
            text += f"‚Ä¢ {service.service_name} ‚Äî {service.service_price:.0f}‚ÇΩ ({service.service_duration} –º–∏–Ω)\n"
    else:
        text += "\nüõ† <i>–£—Å–ª—É–≥–∏ –Ω–µ —Å–≤—è–∑–∞–Ω—ã</i>\n"

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    await delete_last_message(callback_query, await state.get_data())
    
    if barber.photo_path:
        sent = await callback_query.bot.send_photo(
            chat_id=callback_query.message.chat.id,
            photo=FSInputFile(barber.photo_path),
            caption=text,
            reply_markup=kbds,
            parse_mode="HTML"
        )
    else:
        sent = await callback_query.bot.send_message(
            chat_id=callback_query.message.chat.id,
            text=text,
            reply_markup=kbds,
            parse_mode="HTML"
        )
    
    await state.update_data(last_msg_id=sent.message_id)
    await callback_query.answer()



@admin_private_router.callback_query(F.data.startswith("confirm_delete_barber_"))
async def confirm_delete_barber(callback_query: CallbackQuery, session: AsyncSession):
    barber_id = int(callback_query.data.split("_")[-1])

    barber = await orm_get_barber_by_id(session, barber_id)
    if not barber:
        await callback_query.answer("‚ö†Ô∏è –ë–∞—Ä–±–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    deleted_name = await orm_delete_barber_by_id(session, barber_id)

    await orm_log_admin_action(
        session=session,
        admin_id=callback_query.from_user.id,
        action="–£–¥–∞–ª–µ–Ω–∏–µ –±–∞—Ä–±–µ—Ä–∞",
        description=f"–£–¥–∞–ª–µ–Ω –±–∞—Ä–±–µ—Ä: {barber.name}, ID: {barber.id}, –¢–µ–ª–µ—Ñ–æ–Ω: {barber.phone}"
    )

    await safe_edit_or_send_new(
        bot=callback_query.bot,
        message=callback_query.message,
        text=f"‚úÖ –ë–∞—Ä–±–µ—Ä <b>{deleted_name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–æ —Å–ø–∏—Å–∫–æ–º –±–∞—Ä–±–µ—Ä–æ–≤?",
        kb=get_barbers_list_what_do_inline()
    )

    await callback_query.answer()






# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞ —É—Å–ª—É–≥–∏
@admin_private_router.message(UnlinkServiceState.choosing_service)
async def unlink_service_from_barber(message: types.Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    services = data.get("services", [])
    barber_id = data.get("barber_id")
    barber = await orm_get_barber_by_id(session, barber_id)

    try:
        index = int(message.text.strip()) - 1
        if not (0 <= index < len(services)):
            raise ValueError
    except ValueError:
        await delete_last_message(message, data)
        await message.delete()
        sent = await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —É—Å–ª—É–≥–∏.",
            reply_markup=get_callback_btns(btns={"–û—Ç–º–µ–Ω–∞": "cancel_admin"})
        )
        await state.update_data(last_msg_id=sent.message_id)
        return

    service = services[index]

    await orm_unlink_service_from_barber(session, barber_id, service.id)
    await orm_log_admin_action(
        session=session,
        admin_id=message.from_user.id,
        action="–£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ —É—Å–ª—É–≥–∏ —Å –±–∞—Ä–±–µ—Ä–æ–º",
        description=f"–°–≤—è–∑—å —É—Å–ª—É–≥–∏ –∏ –±–∞—Ä–±–µ—Ä–∞ —É–¥–∞–ª–µ–Ω–∞: –ë–∞—Ä–±–µ—Ä - {barber.name}, —É—Å–ª—É–≥–∞ - {service.service_name}."
    )

    await delete_last_message(message, data)
    await message.delete()
    await state.clear()

    sent = await message.answer(
        f"‚úÖ –£—Å–ª—É–≥–∞ <b>{service.service_name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —É –±–∞—Ä–±–µ—Ä–∞.\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–æ —Å–ø–∏—Å–∫–æ–º –±–∞—Ä–±–µ—Ä–æ–≤?",
        reply_markup=get_barbers_list_what_do_inline(),
        parse_mode="HTML"
    )
    await state.update_data(last_msg_id=sent.message_id)



# –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –≥—Ä–∞—Ñ–∏–∫–æ–º —Ä–∞–±–æ—Ç—ã –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∞—Ä–±–µ—Ä–∞
@admin_private_router.callback_query(AddBarbers.schedule_action)
async def handle_schedule_action(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    action = callback_query.data
    data = await state.get_data()

    await delete_last_message(callback_query, data)

    if action == "edit_schedule":
        sent = await safe_edit_or_send_new(
            bot=callback_query.bot,
            message=callback_query.message,
            text="<b>üìÖ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –≤ –∫–æ—Ç–æ—Ä—ã–µ –±–∞—Ä–±–µ—Ä –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.",
            kb=get_weekday_selection_kb_admin()
        )
        await state.update_data(last_msg_id=sent.message_id)
        await state.set_state(AddBarbers.work_days)
        await callback_query.answer()
        return

    if action == "keep_schedule":
        obj = data.get("obj")
        state_data = await state.get_data()
        if obj:
            sent = await safe_edit_or_send_new(
                bot=callback_query.bot,
                message=callback_query.message,
                text=f"‚úÖ –î–∞–Ω–Ω—ã–µ –±–∞—Ä–±–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {obj.name}\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–æ —Å–ø–∏—Å–∫–æ–º –±–∞—Ä–±–µ—Ä–æ–≤?",
                kb=get_barbers_list_what_do_inline()
            )
            
            await orm_log_admin_action(
                session=session,
                admin_id=callback_query.from_user.id,
                action="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞—Ä–±–µ—Ä–∞",
                description=f"–ë–∞—Ä–±–µ—Ä –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {obj.name}, ID: {obj.id}"
            )
        await orm_update_barber_info(state_data, session)
        await state.clear()
        await state.update_data(last_msg_id=sent.message_id)
        await callback_query.answer()













# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# –í—ã–±–æ—Ä —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏
@admin_private_router.callback_query(F.data == "edit_servisec_what_do")
async def edit_servisec_what_do(callback_query: CallbackQuery,state:FSMContext, session: AsyncSession):
    await callback_query.answer()
    sent_message = await safe_edit_or_send_new(
        bot=callback_query.bot,
        message=callback_query.message,
        text="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–µ—Ä–≤–∏—Å–æ–≤?",
        kb=get_callback_btns(btns={
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å": "add_services",
            "üìú –°–ø–∏—Å–æ–∫": "admin_services_list",
            "üîô –ù–∞–∑–∞–¥": "cancel_admin"
        })
    )
    await state.update_data(last_msg_id=sent_message.message_id)
# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏ –≤ –±–¥
@admin_private_router.callback_query(F.data == "add_services")
async def add_service(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    await callback_query.answer()
    await delete_last_message(callback_query, await state.get_data())
    try:
        await callback_query.message.delete()
    except Exception:
        pass

    text = (
        "üÜï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏</b>\n\n"
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏</b>:\n"
        "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –°—Ç—Ä–∏–∂–∫–∞ –º—É–∂—Å–∫–∞—è</i>"
    )

    sent_message = await callback_query.bot.send_message(
        chat_id=callback_query.message.chat.id,
        text=text,
        reply_markup=get_callback_btns(btns={"‚ùå –û—Ç–º–µ–Ω–∞": "cancel_admin"}),
        parse_mode="HTML"
    )

    await state.update_data(last_msg_id=sent_message.message_id)
    await state.update_data(obj=None)
    await state.set_state(AddService.name)





# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏
@admin_private_router.message(AddService.name, F.text)
async def add_service_name(message: types.Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    obj = data.get("obj")

    await delete_last_message(message, data)
    try:
        await message.delete()
    except Exception:
        pass

    if obj and message.text.strip() == ".":
        name = obj.service_name
    else:
        name = message.text.strip()

    await state.update_data(name=name)

    if obj:
        text = (
            f"üí∞ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —É—Å–ª—É–≥–∏</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{round(obj.service_price, 2)} —Ä—É–±.</b>\n"
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–≤—É—é —Ü–µ–Ω—É</b> –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>.</code> —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π."
        )
    else:
        text = (
            "üí∞ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω—ã —É—Å–ª—É–≥–∏</b>\n\n"
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>—Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏</b> –≤ —Ä—É–±–ª—è—Ö.\n"
            "<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 1200</i>"
        )

    sent_message = await message.bot.send_message(
        chat_id=message.chat.id,
        text=text,
        reply_markup=get_callback_btns(btns={"‚ùå –û—Ç–º–µ–Ω–∞": "cancel_admin"}),
        parse_mode="HTML"
    )

    await state.update_data(last_msg_id=sent_message.message_id)
    await state.set_state(AddService.price)


# –û–±—Ä–æ–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π
@admin_private_router.message(AddService.name)
async def add_service_name_err(message: types.Message, state: FSMContext):
    await delete_last_message(message, await state.get_data())
    try:
        await message.delete()
    except Exception:
        pass

    sent_message = await message.bot.send_message(
        chat_id=message.chat.id,
        text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏.\n\n‚úèÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
        reply_markup=get_callback_btns(btns={"–û—Ç–º–µ–Ω–∞": "cancel_admin"})
    )
    await state.update_data(last_msg_id=sent_message.message_id)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏
@admin_private_router.message(AddService.price, F.text)
async def add_service_price(message: types.Message, state: FSMContext):
    data = await state.get_data()
    obj = data.get("obj")

    if obj and message.text.strip() == ".":
        price = obj.service_price
    elif message.text.strip().isdigit():
        price = int(message.text.strip())
    else:
        return await add_service_price_err(message, state)

    await delete_last_message(message, data)
    try:
        await message.delete()
    except Exception:
        pass

    await state.update_data(price=price)

    if obj:
        await state.update_data(duration=obj.service_duration)
        service_name = SERVICE_CATEGORIES_REVERSED.get(obj.service_category) if obj.service_category else None

        msg_text = "üìå –£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:"
        if service_name:
            msg_text += f"\n(–¢–µ–∫—É—â–∞—è: {service_name}, –Ω–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –¥—Ä—É–≥—É—é –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞–∫ –µ—Å—Ç—å)"

        sent_message = await message.bot.send_message(
            chat_id=message.chat.id,
            text=msg_text,
            reply_markup=get_callback_btns(btns={
                "‚úÇÔ∏è –°—Ç—Ä–∏–∂–∫–∏": "haircut",
                "üßî –ë–æ—Ä–æ–¥–∞ –∏ –±—Ä–∏—Ç—å—ë": "beard",
                "üíÜ‚Äç‚ôÇÔ∏è –£—Ö–æ–¥ –∑–∞ –≤–æ–ª–æ—Å–∞–º–∏ –∏ –∫–æ–∂–µ–π": "care",
                "üé≠ –°—Ç–∞–π–ª–∏–Ω–≥": "styling",
                "üéü –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —É—Å–ª—É–≥–∏": "combo",
                "üîô –û—Ç–º–µ–Ω–∞": "cancel_admin"
            }),
            parse_mode="HTML"
        )

        await state.update_data(last_msg_id=sent_message.message_id)
        await state.set_state(AddService.category)
        return

    sent_message = await message.bot.send_message(
        chat_id=message.chat.id,
        text="‚è≥ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö:",
        reply_markup=get_callback_btns(btns={"–û—Ç–º–µ–Ω–∞": "cancel_admin"})
    )
    await state.update_data(last_msg_id=sent_message.message_id)
    await state.set_state(AddService.duration)



# –û—à–∏–±–∫–∞, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–π
@admin_private_router.message(AddService.price)
async def add_service_price_err(message: types.Message, state: FSMContext):
    await delete_last_message(message, await state.get_data())
    try:
        await message.delete()
    except Exception:
        pass

    sent_message = await message.bot.send_message(
        chat_id=message.chat.id,
        text="‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä 500):",
        reply_markup=get_callback_btns(btns={"–û—Ç–º–µ–Ω–∞": "cancel_admin"})
    )
    await state.update_data(last_msg_id=sent_message.message_id)



# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏
@admin_private_router.message(AddService.duration, F.text)
async def add_service_duration(message: types.Message, state: FSMContext):
    data = await state.get_data()
    text = message.text.strip()

    if not text.isdigit():
        return await add_service_duration_err(message, state)

    duration = int(text)
    await state.update_data(duration=duration)

    await delete_last_message(message, data)
    try:
        await message.delete()
    except Exception:
        pass

    msg_text = "üìå –£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:"

    sent_message = await message.bot.send_message(
        chat_id=message.chat.id,
        text=msg_text,
        reply_markup=get_callback_btns(btns={
            "‚úÇÔ∏è –°—Ç—Ä–∏–∂–∫–∏": "haircut",
            "üßî –ë–æ—Ä–æ–¥–∞ –∏ –±—Ä–∏—Ç—å—ë": "beard",
            "üíÜ‚Äç‚ôÇÔ∏è –£—Ö–æ–¥ –∑–∞ –≤–æ–ª–æ—Å–∞–º–∏ –∏ –∫–æ–∂–µ–π": "care",
            "üé≠ –°—Ç–∞–π–ª–∏–Ω–≥": "styling",
            "üéü –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —É—Å–ª—É–≥–∏": "combo",
            "üîô –û—Ç–º–µ–Ω–∞": "cancel_admin"
        }),
        parse_mode="HTML"
    )

    await state.update_data(last_msg_id=sent_message.message_id)
    await state.set_state(AddService.category)



# –û—à–∏–±–∫–∞, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π
@admin_private_router.message(AddService.duration)
async def add_service_duration_err(message: types.Message, state: FSMContext):
    await delete_last_message(message, await state.get_data())
    try:
        await message.delete()
    except Exception:
        pass

    sent_message = await message.bot.send_message(
        chat_id=message.chat.id,
        text="‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 30):",
        reply_markup=get_callback_btns(btns={"–û—Ç–º–µ–Ω–∞": "cancel_admin"}),
        parse_mode="HTML"
    )
    await state.update_data(last_msg_id=sent_message.message_id)



# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥–∏ –∏ –∑–∞–Ω–µ—Å–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@admin_private_router.callback_query(AddService.category, F.data)
async def add_admin_service_category(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    await callback_query.answer()
    await delete_last_message(callback_query, await state.get_data())
    try:
        await callback_query.message.delete()
    except Exception:
        pass

    await state.update_data(category=callback_query.data)
    await state.update_data(actor_id=callback_query.from_user.id)

    data = await state.get_data()

    if data.get("obj"):  # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —É—Å–ª—É–≥–∏
        message_text = await orm_update_service(data, session)

        await orm_log_admin_action(
            session=session,
            admin_id=data["actor_id"],
            action="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏",
            description=(
                f"–£—Å–ª—É–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: "
                f"–Ω–∞–∑–≤–∞–Ω–∏–µ ‚Äî {data['name']}, "
                f"—Ü–µ–Ω–∞ ‚Äî {data['price']}, "
                f"–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äî {data['duration']}, "
                f"–∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Äî {SERVICE_CATEGORIES_REVERSED[data['category']][2:]}"
            )
        )
    else:  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏
        message_text = await orm_add_service(data, session)
        if message_text:
            await orm_log_admin_action(
                session=session,
                admin_id=callback_query.from_user.id,
                action="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏",
                description=(
                    f"–£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: "
                    f"{data['name']} ‚Äî {data['price']}‚ÇΩ, "
                    f"{data['duration']} –º–∏–Ω, "
                    f"–∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Äî {SERVICE_CATEGORIES_REVERSED[data['category']][2:]}"
                )
            )

    sent_message = await callback_query.bot.send_message(
        chat_id=callback_query.message.chat.id,
        text=message_text,
        reply_markup=get_callback_btns(btns={
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å": "add_services",
            "üìú –°–ø–∏—Å–æ–∫": "admin_services_list",
            "üîô –ù–∞–∑–∞–¥": "cancel_admin"
        }),
        parse_mode="HTML"
    )

    
    await state.clear()
    await state.update_data(last_msg_id=sent_message.message_id)

    



# –°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö —É—Å–ª—É–≥
@admin_private_router.callback_query(F.data == "admin_services_list")
async def admin_services_list(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    await callback_query.answer()
    await delete_last_message(callback_query, await state.get_data())

    text, kbds = await get_admin_servives_list_content(session, level=0)
    sent = await safe_edit_or_send_new(
        bot=callback_query.bot,
        message=callback_query.message,
        text=text,
        kb=kbds
    )
    await state.update_data(last_msg_id=sent.message_id)




# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞–ª–±–µ–∫–∏ ServiceslistCallBack
@admin_private_router.callback_query(AdminServicesListCallBack.filter())
async def admin_services_list_menu(callback_query: CallbackQuery, state: FSMContext, callback_data: AdminServicesListCallBack, session: AsyncSession):
    data = await state.get_data()
    await delete_last_message(callback_query, data)

    if callback_data.name_btn == "edit":
        obj = await orm_get_service_by_id(session, callback_data.service_id)
        await state.update_data(obj=obj)

        text = (
            f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏, —Ç–µ–∫—É—â–µ–µ: <b>{obj.service_name}</b> "
            "(–û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>.</code> —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å) üìùüìùüìù"
        )

        sent = await safe_edit_or_send_new(
            bot=callback_query.bot,
            message=callback_query.message,
            text=text,
            kb=get_callback_btns(btns={"‚ùå –û—Ç–º–µ–Ω–∞": "cancel_admin"})
        )
        await state.set_state(AddService.name)
        await state.update_data(last_msg_id=sent.message_id)
        await callback_query.answer()
        return

    if callback_data.name_btn == "link_barber":
        barbers = await orm_get_all_barbers(session)
        if not barbers:
            await callback_query.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞—Ä–±–µ—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.", show_alert=True)
            return

        await state.update_data(barbers=barbers, service_id=callback_data.service_id)

        text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –±–∞—Ä–±–µ—Ä–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —É—Å–ª—É–≥–µ:</b>\n\n"
        for i, barber in enumerate(barbers, start=1):
            text += f"{i}) {barber.name} (–æ–ø—ã—Ç: {barber.experience} –ª–µ—Ç)\n"

        sent = await safe_edit_or_send_new(
            bot=callback_query.bot,
            message=callback_query.message,
            text=text,
            kb=get_callback_btns(btns={"‚ùå –û—Ç–º–µ–Ω–∞": "cancel_admin"})
        )
        await state.set_state(AddService.select_barber_to_link)
        await state.update_data(last_msg_id=sent.message_id)
        await callback_query.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    text, kbds = await get_admin_servives_list_content(
        session=session,
        level=callback_data.level,
        category=callback_data.service_category,
        page=callback_data.page,
        service_id=callback_data.service_id,
        name_btn=callback_data.name_btn,
        admin_id=callback_query.from_user.id
    )

    sent = await safe_edit_or_send_new(
        bot=callback_query.bot,
        message=callback_query.message,
        text=text,
        kb=kbds
    )
    await state.update_data(last_msg_id=sent.message_id)
    await callback_query.answer()














# –í—Ö–æ–¥ –≤ —Å–æ—Å–æ—Ç—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ –±–∞—Ä–±–µ—Ä–∞ –¥–ª—è —É—Å–ª—É–≥–∏
@admin_private_router.message(AddService.select_barber_to_link)
async def process_link_barber_to_service(message: types.Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    barbers = data["barbers"]
    service_id = data["service_id"]
    admin_id = message.from_user.id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ–≥–æ –≤–≤–æ–¥)
    try:
        await message.delete()
    except Exception:
        pass

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞
    try:
        index = int(message.text.strip()) - 1
        if not (0 <= index < len(barbers)):
            raise ValueError
    except ValueError:
        # –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ ‚Äî —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
        await delete_last_message(message, data)

        text = (
            "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –±–∞—Ä–±–µ—Ä–∞.\n\n"
            "<b>–í—ã–±–µ—Ä–∏—Ç–µ –±–∞—Ä–±–µ—Ä–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —É—Å–ª—É–≥–µ:</b>\n\n"
        )
        for i, barber in enumerate(barbers, start=1):
            text += f"{i}) {barber.name} (–æ–ø—ã—Ç: {barber.experience} –ª–µ—Ç)\n"

        sent = await message.bot.send_message(
            chat_id=message.chat.id,
            text=text,
            reply_markup=get_callback_btns(btns={"‚ùå –û—Ç–º–µ–Ω–∞": "cancel_admin"}),
            parse_mode="HTML"
        )
        await state.update_data(last_msg_id=sent.message_id)
        return

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é
    await delete_last_message(message, data)

    barber = barbers[index]
    service = await orm_get_service_by_id(session, service_id)
    service_name = service.service_name if service else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞"

    # –ü—Ä–æ–±—É–µ–º –ø—Ä–∏–≤—è–∑–∞—Ç—å
    try:
        check = await orm_link_barber_to_service(session, barber.id, service_id)
        if check:
            result_text = f"‚úÖ –ë–∞—Ä–±–µ—Ä <b>{barber.name}</b> —Ç–µ–ø–µ—Ä—å —Å–≤—è–∑–∞–Ω —Å —É—Å–ª—É–≥–æ–π.\n"
            await orm_log_admin_action(
                session=session,
                admin_id=admin_id,
                action="–ü—Ä–∏–≤—è–∑–∫–∞ –±–∞—Ä–±–µ—Ä–∞ –∫ —É—Å–ª—É–≥–µ",
                description=(
                    f"–ë–∞—Ä–±–µ—Ä: {barber.name} (ID: {barber.id}) —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —É—Å–ª—É–≥–µ: {service_name} (ID: {service_id})"
                )
            )
        else:
            result_text = f"üî¥ –ë–∞—Ä–±–µ—Ä <b>{barber.name}</b> —É–∂–µ —Å–≤—è–∑–∞–Ω —Å —ç—Ç–æ–π —É—Å–ª—É–≥–æ–π!\n"
            await orm_log_admin_action(
                session=session,
                admin_id=admin_id,
                action="–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –±–∞—Ä–±–µ—Ä–∞",
                description=(
                    f"–ë–∞—Ä–±–µ—Ä: {barber.name} (ID: {barber.id}) —É–∂–µ –±—ã–ª —Å–≤—è–∑–∞–Ω —Å —É—Å–ª—É–≥–æ–π: {service_name} (ID: {service_id})"
                )
            )
    except Exception as e:
        result_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ –±–∞—Ä–±–µ—Ä–∞ —Å —É—Å–ª—É–≥–æ–π."
        await orm_log_admin_action(
            session=session,
            admin_id=admin_id,
            action="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –±–∞—Ä–±–µ—Ä–∞",
            description=(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –±–∞—Ä–±–µ—Ä–∞: {barber.name} (ID: {barber.id}) –∫ —É—Å–ª—É–≥–µ: {service_name} (ID: {service_id}). "
                f"–û—à–∏–±–∫–∞: {str(e)}"
            )
        )

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
    list_text, kbds = await get_admin_servives_list_content(session, level=0)
    final_text = result_text + list_text

    sent = await message.bot.send_message(
        chat_id=message.chat.id,
        text=final_text,
        reply_markup=kbds,
        parse_mode="HTML"
    )
    
    await state.clear()
    await state.update_data(last_msg_id=sent.message_id)
















# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π
@admin_private_router.callback_query(F.data == "list_admin")
async def list_admin_logs(callback_query: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(AdminLogFSM.waiting_for_start_date)
    msg = await safe_edit_or_send_new(
        bot=callback_query.bot,
        message=callback_query.message,
        text="üìÖ –£–∫–∞–∂–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É (–ì–ì–ì–ì-–ú–ú-–î–î):",
        kb=get_callback_btns(btns={"–û—Ç–º–µ–Ω–∞": "cancel_admin"})
    )
    await state.update_data(last_msg_id=msg.message_id, admin_log_msg_ids=[msg.message_id])
    await callback_query.answer()





@admin_private_router.message(AdminLogFSM.waiting_for_start_date)
async def select_start_date(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await delete_last_message(message, data)

    try:
        start_date = datetime.strptime(message.text.strip(), "%Y-%m-%d")
        await state.update_data(start_date=start_date)

        try:
            await message.delete()
        except Exception:
            pass

        msg = await safe_edit_or_send_new(
            bot=message.bot,
            message=message,
            text="üìÖ –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É (–ì–ì–ì–ì-–ú–ú-–î–î):",
            kb=get_callback_btns(btns={"–û—Ç–º–µ–Ω–∞": "cancel_admin"})
        )
        await state.update_data(last_msg_id=msg.message_id)
        await state.set_state(AdminLogFSM.waiting_for_end_date)

    except ValueError:
        try:
            await message.delete()
        except Exception:
            pass

        msg = await message.bot.send_message(
            chat_id=message.chat.id,
            text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: –ì–ì–ì–ì-–ú–ú-–î–î",
            reply_markup=get_callback_btns(btns={"–û—Ç–º–µ–Ω–∞": "cancel_admin"})
        )
        await state.update_data(last_msg_id=msg.message_id)






@admin_private_router.message(AdminLogFSM.waiting_for_end_date)
async def select_end_date(message: types.Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    await delete_last_message(message, data)

    try:
        end_date = datetime.strptime(message.text.strip(), "%Y-%m-%d")
        start_date = data.get("start_date")

        try:
            await message.delete()
        except Exception:
            pass

        logs = await orm_get_admin_logs(session, start_date, end_date)
        if not logs:
            msg = await message.bot.send_message(
                chat_id=message.chat.id,
                text="üì≠ –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=get_callback_btns(btns={"–û—Ç–º–µ–Ω–∞": "cancel_admin"})
            )
            await state.update_data(last_msg_id=msg.message_id)
            return

        paginator = Paginator(logs, page=1, per_page=10)

        msg = await message.bot.send_message(
            chat_id=message.chat.id,
            text="–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤...",
        )
        await state.update_data(admin_log_msg_ids=[msg.message_id])

        await show_log_page(msg, state, paginator)

        await state.set_state(AdminLogFSM.viewing_logs)
        await state.update_data(
            paginator=paginator,
            start_date=start_date,
            end_date=end_date,
        )

    except ValueError:
        try:
            await message.delete()
        except Exception:
            pass

        msg = await message.bot.send_message(
            chat_id=message.chat.id,
            text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: –ì–ì–ì–ì-–ú–ú-–î–î",
            reply_markup=get_callback_btns(btns={"–û—Ç–º–µ–Ω–∞": "cancel_admin"})
        )
        await state.update_data(last_msg_id=msg.message_id)


@admin_private_router.callback_query(AdminLogFSM.viewing_logs, F.data.in_({"previous", "next"}))
async def paginate_logs(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    paginator: Paginator = data.get("paginator")

    if callback_query.data == "next" and paginator.has_next():
        paginator.page += 1
    elif callback_query.data == "previous" and paginator.has_previous():
        paginator.page -= 1

    await state.update_data(paginator=paginator)
    await show_log_page(callback_query.message, state, paginator)
    await callback_query.answer()






async def show_log_page(message_or_obj, state: FSMContext, paginator: Paginator):
    logs = paginator.get_page()
    data = await state.get_data()

    text = f"üìò –ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π (—Å—Ç—Ä. {paginator.page} –∏–∑ {paginator.pages}):\n\n"
    for log in logs:
        text += (
            f"üïì {log.timestamp.strftime('%d.%m.%Y %H:%M')}\n"
            f"üë§ {log.admin_name} | üõ† {log.action}\n"
            f"üìÑ {log.description}\n\n"
        )

    nav_buttons = pages(paginator)
    nav_buttons["–û—Ç–º–µ–Ω–∞"] = "cancel_admin"
    keyboard = get_callback_btns(btns=nav_buttons)

    msg_id = data.get("admin_log_msg_ids", [None])[0]
    if msg_id:
        try:
            await message_or_obj.bot.edit_message_text(
                chat_id=message_or_obj.chat.id,
                message_id=msg_id,
                text=text[:4096],
                reply_markup=keyboard
            )
        except Exception:
            sent = await message_or_obj.bot.send_message(
                chat_id=message_or_obj.chat.id,
                text=text[:4096],
                reply_markup=keyboard
            )
            await state.update_data(admin_log_msg_ids=[sent.message_id])
    else:
        sent = await message_or_obj.bot.send_message(
            chat_id=message_or_obj.chat.id,
            text=text[:4096],
            reply_markup=keyboard
        )
        await state.update_data(admin_log_msg_ids=[sent.message_id])





# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ 
# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞

@admin_private_router.callback_query(F.data == "edit_admin_list")
async def edit_admins(callback_query: CallbackQuery, state: FSMContext):
    await delete_last_message(callback_query, await state.get_data())
    await callback_query.answer()

    sent_message = await safe_edit_or_send_new(
        bot=callback_query.bot,
        message=callback_query.message,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", 
        kb=get_callback_btns(btns={
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞": "add_admin",
            "‚ùå –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞": "delete_admin",
            "üìú –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤": "admin_list",
            "üîô –û—Ç–º–µ–Ω–∞": "cancel_admin"
        })
    )
    await state.update_data(last_msg_id=sent_message.message_id)


# –ù–∞—á–∞–ª–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ (–∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏)

@admin_private_router.callback_query(F.data == "add_admin")
async def add_admin(callback_query: CallbackQuery, state: FSMContext):
    await delete_last_message(callback_query, await state.get_data())
    await callback_query.answer()
    await delete_last_message(callback_query, await state.get_data())

    sent_message = await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üìùüìùüìù",reply_markup=get_callback_btns(btns={"–û—Ç–º–µ–Ω–∞": "cancel_admin"}))
    await state.update_data(last_msg_id=sent_message.message_id)
    await state.set_state(AddAdmin.name)




# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@admin_private_router.message(AddAdmin.name, F.text)
async def add_admin_name(message: types.Message, state: FSMContext):
    await delete_last_message(message, await state.get_data())

    await state.update_data(name=message.text.strip())

    sent_message = await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üìùüìùüìù",
        reply_markup=get_callback_btns(btns={"–û—Ç–º–µ–Ω–∞": "cancel_admin"})
    )
    await state.update_data(last_msg_id=sent_message.message_id)

    try:
        await message.delete()
    except Exception:
        pass

    await state.set_state(AddAdmin.admin_id)

# –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è
@admin_private_router.message(AddAdmin.name)
async def add_admin_invalid_name(message: types.Message, state: FSMContext):
    await delete_last_message(message, await state.get_data())

    try:
        await message.delete()
    except Exception:
        pass

    sent_message = await message.answer(
        "‚ùå –í–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.",
        reply_markup=get_callback_btns(btns={"–û—Ç–º–µ–Ω–∞": "cancel_admin"})
    )
    await state.update_data(last_msg_id=sent_message.message_id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@admin_private_router.message(AddAdmin.admin_id, F.text)
async def add_admin_id(message: types.Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()

    if not message.text.strip().isdigit():
        await delete_last_message(message, data)

        sent_message = await message.answer(
            "‚ùå ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_callback_btns(btns={"–û—Ç–º–µ–Ω–∞": "cancel_admin"})
        )
        await state.update_data(last_msg_id=sent_message.message_id)

        try:
            await message.delete()
        except Exception:
            pass

        return

    await state.update_data(admin_id=message.text.strip())
    data = await state.get_data()

    await delete_last_message(message, data)

    try:
        await message.delete()
    except Exception:
        pass

    await state.clear()

    res = await orm_add_admin_to_db(
        admin_id=int(data['admin_id']),
        admin_name=data['name'],
        actor_id=message.from_user.id,
        session=session
    )

    if res:
        await orm_log_admin_action(
            session=session,
            admin_id=message.from_user.id,
            action="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            description=f"–î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ID ‚Äî {data['admin_id']}, –ò–º—è ‚Äî {data['name']}"
        )

        await message.bot.send_message(
            chat_id=message.chat.id,
            text=f'''‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!
–ò–º—è: <strong>{data['name']}</strong>
ID: <strong>{data['admin_id']}</strong>

üîô –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:''',
            reply_markup=get_main_inlineBtns_admin(),
            parse_mode="HTML"
        )
    else:
        await message.bot.send_message(
            chat_id=message.chat.id,
            text=f'''‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!
–ò–º—è: <strong>{data['name']}</strong>
ID: <strong>{data['admin_id']}</strong>

üîô –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:''',
            reply_markup=get_main_inlineBtns_admin(),
            parse_mode="HTML"
        )








# –ù–∞—á–∞–ª–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω—è –∞–¥–º–∏–Ω–∞
@admin_private_router.callback_query(F.data == "delete_admin")
async def delete_admin(callback_query: CallbackQuery, state: FSMContext):
    await delete_last_message(callback_query, await state.get_data())
    await callback_query.answer()

    sent_message = await safe_edit_or_send_new(
        bot=callback_query.bot,
        message=callback_query.message,
        text="–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üìù",
        kb=get_callback_btns(btns={"–û—Ç–º–µ–Ω–∞": "cancel_admin"})
    )
    await state.update_data(last_msg_id=sent_message.message_id)
    await state.set_state(DeleteAdmin.admin_id)


# –î–ª—è –ø–æ–ª—É—á–µ–Ω—è id —É–¥–∞–ª—è–µ–º–æ–≥–æ –∞–¥–º–∏–Ω–∞
@admin_private_router.message(DeleteAdmin.admin_id, F.text)
async def delete_admin_id(message: types.Message, state: FSMContext, session: AsyncSession):
    await delete_last_message(message, await state.get_data())

    admin_id = message.text.strip()
    await state.update_data(admin_id=admin_id)

    try:
        await message.delete()
    except Exception:
        pass

    admin_name = await orm_get_admin_name_by_id(admin_id, session)

    if admin_name is None:
        sent_message = await message.answer(
            "‚ö†Ô∏è <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å ID –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_callback_btns(btns={
                "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞": "add_admin",
                "‚ùå –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞": "delete_admin",
                "üìú –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤": "admin_list",
                "üîô –û—Ç–º–µ–Ω–∞": "cancel_admin"
            }),
            parse_mode="HTML"
        )
        await state.update_data(last_msg_id=sent_message.message_id)
        await state.clear()
        return

    await state.update_data(admin_name=admin_name)

    sent_message = await message.answer(
        f"‚úÖ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_name} (ID: {admin_id}) –Ω–∞–π–¥–µ–Ω!</b>\n"
        "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ —É–¥–∞–ª–∏—Ç—å?",
        reply_markup=get_callback_btns(btns={
            "‚úîÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ": f"confirm_delete_admin_{admin_id}",
            "üîô –û—Ç–º–µ–Ω–∞": "cancel_admin"
        }),
        parse_mode="HTML"
    )
    await state.update_data(last_msg_id=sent_message.message_id)
    await state.set_state(DeleteAdmin.correct)


@admin_private_router.callback_query(DeleteAdmin.correct, F.data.startswith("confirm_delete_admin_"))
async def delete_admin_from_db(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    await delete_last_message(callback_query, await state.get_data())
    data = await state.get_data()

    del_admin = await orm_del_admin_by_id(
        admin_id=int(data["admin_id"]),
        session=session
    )

    await callback_query.answer()

    if del_admin:
        await orm_log_admin_action(
            session=session,
            admin_id=callback_query.from_user.id,
            action="–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            description=(
                f"–£–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ID ‚Äî {data['admin_id']}, "
                f"–ò–º—è ‚Äî {data['admin_name']}"
            )
        )

        sent_message = await safe_edit_or_send_new(
            bot=callback_query.bot,
            message=callback_query.message,
            text=(
                f"‚úÖ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {data['admin_name']} (ID: {data['admin_id']}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            ),
            kb=get_main_inlineBtns_admin()
        )
        await state.update_data(last_msg_id=sent_message.message_id)
    else:
        sent_message = await safe_edit_or_send_new(
            bot=callback_query.bot,
            message=callback_query.message,
            text=(
                f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {data['admin_name']} (ID: {data['admin_id']}).</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            ),
            kb=get_main_inlineBtns_admin()
        )
        await state.update_data(last_msg_id=sent_message.message_id)

    await state.clear()






# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@admin_private_router.callback_query(F.data == "admin_list")
async def get_admins_list_cmd(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    await delete_last_message(callback_query, await state.get_data())
    await callback_query.answer()

    admin_list_text = await get_admins_list(session)

    sent_message = await safe_edit_or_send_new(
        bot=callback_query.bot,
        message=callback_query.message,
        text=admin_list_text,
        kb=get_callback_btns(btns={
            "–ù–∞–∑–∞–¥": "edit_admin_list"
        })
    )
    await state.update_data(last_msg_id=sent_message.message_id)






# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\



# –ö–æ–º–∞–Ω–¥–∞ —á—Ç–æ –±—ã –≤–µ—Ä–Ω—É—Ç—Å—å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@admin_private_router.callback_query(F.data == "exit_admin")
async def back_main_menu(callback_query: CallbackQuery, state: FSMContext):
    main_menu_text = (
        "<b>üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∏–∂–µ:\n")
    await callback_query.answer()

    try:
        await callback_query.message.delete()
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∞–¥–º–∏–Ω–∫–∏: {e}")
        await callback_query.message.answer(main_menu_text,reply_markup= get_main_inlineBtns_user())
    await state.clear()


# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


# –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–≤–æ–¥
@admin_private_router.callback_query(F.data == "anagement")
async def show_user_guide(callback_query: CallbackQuery, state: FSMContext):
    await delete_last_message(callback_query, await state.get_data())
    await callback_query.answer()

    text = (
        "üìï <b>–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> üìï\n\n"
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Telegram-–±–æ—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.\n\n"
        "üîß <b>–ü–æ—à–∞–≥–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞:</b>\n"
        "1Ô∏è‚É£ –ó–∞–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª <b>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</b>.\n"
        "2Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ <b>–±–∞—Ä–±–µ—Ä–æ–≤</b> ‚Äî —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ —Ñ–æ—Ç–æ.\n"
        "3Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ <b>—É—Å–ª—É–≥–∏</b> ‚Äî —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.\n"
        "4Ô∏è‚É£ –°–≤—è–∂–∏—Ç–µ —É—Å–ª—É–≥–∏ –∏ –±–∞—Ä–±–µ—Ä–æ–≤ ‚Äî –∫—Ç–æ —á—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç.\n"
        "5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.\n\n"
        "üìã <b>–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
        "‚ûï <b>–ó–∞–ø–∏—Å–∞—Ç—å</b> ‚Äî –≤—Ä—É—á–Ω—É—é –∑–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –∏–º–µ–Ω–µ–º –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º.\n"
        "üìù <b>–ó–∞–ø–∏—Å–∏</b> ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π (–µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω—è–µ—Ç –ø–æ –∑–≤–æ–Ω–∫—É).\n"
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</b> ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞—Ä–±–µ—Ä–∞–º–∏, —É—Å–ª—É–≥–∞–º–∏, –∏—Ö —Å–≤—è–∑—è–º–∏ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.\n"
        "üìú <b>–ñ—É—Ä–Ω–∞–ª</b> ‚Äî –∏—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–∏–æ–¥–∞.\n"
        "üîß <b>–ê–¥–º–∏–Ω—ã</b> ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.\n"
        "üìï <b>–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ</b> ‚Äî —ç—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.\n\n"
        "‚ùóÔ∏è <b>–í–∞–∂–Ω–æ:</b> –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö. –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–Ω—ã –≤ –∂—É—Ä–Ω–∞–ª–µ.\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –µ—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–∞—Ä–±–µ—Ä–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–ø–∏—à–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –µ–≥–æ –∑–∞–ø–∏—Å—è—Ö, "
        "—Ç–∞–∫ –∫–∞–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∏—Ö –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞."
    )

    sent = await safe_edit_or_send_new(
        bot=callback_query.bot,
        message=callback_query.message,
        text=text,
        kb=get_callback_btns(btns={"‚¨ÖÔ∏è –ù–∞–∑–∞–¥": "cancel_admin"})
    )
    await state.update_data(last_msg_id=sent.message_id)










# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\






# @admin_private_router.callback_query(StateFilter("*"), F.data == "cancel_admin")
# async def cancel_admin(callback_query: CallbackQuery, state: FSMContext):  
#     await state.clear()
#     await callback_query.answer()

#     try:
#         sent_message = await callback_query.message.edit_text(
#             "–í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
#             reply_markup=get_main_inlineBtns_admin()
#         )
#     except TelegramBadRequest:
#         await callback_query.message.delete()
#         sent_message = await callback_query.message.answer(
#             "–í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
#             reply_markup=get_main_inlineBtns_admin()
#         )

#     await state.update_data(last_msg_id=sent_message.message_id)


# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤ –∞–¥–º–Ω–∏–∫–µ
@admin_private_router.callback_query(F.data == "cancel_admin")
async def cancel_admin(callback_query: CallbackQuery, state: FSMContext):  
    await state.clear()
    await callback_query.answer()

    sent_message = None

    # 1. –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        sent_message = await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_inlineBtns_admin()
        )
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞: {e}")

    # 2. –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –ø–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
    if sent_message is None:
        try:
            await callback_query.message.delete()
            logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ.")
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞: {e}")

        # 3. –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        sent_message = await callback_query.message.answer(
            "–í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_inlineBtns_admin()
        )

    # 4. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(last_msg_id=sent_message.message_id)
    






    
# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–∂–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def delete_last_message(env, data):
    """
    –£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å.
    –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ).
    """
    if "last_msg_id" not in data:
        return

    chat_id = env.message.chat.id if isinstance(env, CallbackQuery) else env.chat.id
    bot = env.bot if isinstance(env, CallbackQuery) else env._bot
    last_msg_id = data["last_msg_id"]

    try:
        await bot.delete_message(chat_id, last_msg_id)
        logging.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: id={last_msg_id}")
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (id={last_msg_id}): {e}")




#
async def send_split_messages(state: FSMContext, text: str, chat_id: int, bot: Bot):
    max_length = 4096
    data = await state.get_data()
    message_ids = data.get("admin_log_msg_ids", [])
    for i in range(0, len(text), max_length):
        sent = await bot.send_message(chat_id=chat_id, text=text[i:i+max_length])
        message_ids.append(sent.message_id)
    await state.update_data(admin_log_msg_ids=message_ids)





async def safe_edit_or_send_new(
    bot: Bot,
    message: types.Message,
    text: str,
    photo_path: str | None = None,
    kb: types.InlineKeyboardMarkup | None = None
) -> types.Message:
    chat_id = message.chat.id

    # 1Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    try:
        if photo_path is None:
            return await message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        else:
            # –î–ª—è —Ñ–æ—Ç–æ –≤ Telegram –Ω–µ—Ç edit_caption –±–µ–∑ —Ñ–æ—Ç–æ ‚Äî —Å—á–∏—Ç–∞–µ–º —Ñ–æ—Ç–æ –Ω–æ–≤—ã–º
            raise Exception("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ ‚Äî —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ.")
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (id={message.message_id}): {e}")

    # 2Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å
    try:
        await message.delete()
        logging.info(f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (id={message.message_id})")
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (id={message.message_id}): {e}")

    # 3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if photo_path:
        try:
            photo_file = FSInputFile(photo_path)
            return await bot.send_photo(
                chat_id=chat_id,
                photo=photo_file,
                caption=text,
                reply_markup=kb,
                parse_mode="HTML"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            return await bot.send_message(
                chat_id=chat_id,
                text=f"{text}\n‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.",
                reply_markup=kb,
                parse_mode="HTML"
            )
    else:
        return await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=kb,
            parse_mode="HTML"
        )




    

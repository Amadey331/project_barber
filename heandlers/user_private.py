from aiogram import  types , Router, F
from aiogram.filters import CommandStart,Command, or_f, StateFilter,and_f
from aiogram.fsm.state import StatesGroup,State
from aiogram.fsm.context import FSMContext
from aiogram.utils.formatting import as_list, as_marked_section, Bold
from aiogram.types import CallbackQuery,FSInputFile
from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest

from sqlalchemy.ext.asyncio import AsyncSession

from filters.chat_types import ChatTypeFilter


from kbds.inline_user import UserServiceslistCallBack,UserAddRecordCallBack,UserRateBarberCallback,UserRateDeclineCallback,UserRememberOkCallback,UserViewRecordsCallback, get_main_inlineBtns_user, get_callback_btns

from kbds.replay_user_kb import get_send_number_kb_user

from database.models import AppointmentStatus

from heandlers.user_services_list_processing import get_user_servives_list_content
from heandlers.user_view_records_processing import get_user_records_list

from heandlers.user_record_prcessing import get_add_record_menu_user

from database.orm_query import orm_add_barber_rating,orm_add_appointment_user,orm_get_service_by_id,orm_get_barber_by_id,orm_update_appointment_status,orm_check_daily_limit,orm_get_user_by_id,orm_add_user,orm_get_appointment_by_id,orm_check_rating_exists, orm_add_rating_decline

from datetime import datetime, timedelta

from fsm.user import UserRecordStates

from scheduler import schedule_reminder,schedule_rating_request


import logging



user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(['private']))







class StartStates(StatesGroup):
    waiting_for_contact = State()








# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# –°—Ç–æ—Ä—Ç–æ–≤–æ—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞

@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message, state: FSMContext, session: AsyncSession):
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ /start
    try:
        await message.delete()
    except Exception as e:
        logging.warning(f"[START] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    user = await orm_get_user_by_id(session, message.from_user.id)

    if user:
        sent = await message.answer(
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.",
            reply_markup=get_main_inlineBtns_user(),
            parse_mode="HTML"
        )
        await state.update_data(last_msg_id=sent.message_id)
        await state.clear()
    else:
        text = (
            "<b>üëã –ü—Ä–∏–≤–µ—Ç!</b>\n\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, "
            "–∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n\n"
            "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
            "<i>¬´–ü–æ–ª—å–∑—É—è—Å—å —ç—Ç–∏–º –±–æ—Ç–æ–º, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö¬ª</i>\n\n"
            "<b>–ß—Ç–æ –º—ã —Ö—Ä–∞–Ω–∏–º:</b>\n"
            "‚Ä¢ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
            "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å—è—Ö\n\n"
            "<b>–ó–∞—á–µ–º:</b>\n"
            "‚Ä¢ –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏\n"
            "‚Ä¢ –î–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–∏–∑–∏—Ç–µ\n\n"
            "<b>–í–∞–∂–Ω–æ:</b>\n"
            "‚Ä¢ –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\n"
            "‚Ä¢ –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        )

        sent = await message.answer(
            text,
            reply_markup=get_send_number_kb_user(),
            parse_mode="HTML"
        )
        await state.set_state(StartStates.waiting_for_contact)
        await state.update_data(last_msg_id=sent.message_id)


@user_private_router.message(StartStates.waiting_for_contact, F.contact)
async def process_contact(message: types.Message, state: FSMContext, session: AsyncSession):
    try:
        await message.delete()
    except Exception as e:
        logging.warning(f"[CONTACT] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    data = await state.get_data()

    # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π
    await delete_last_message(message, data)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await orm_add_user(
            session=session,
            user_id=message.from_user.id,
            full_name=message.from_user.full_name,
            phone=str(message.contact.phone_number).replace("+", "")
        )
    except Exception:
        err = await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.update_data(last_msg_id=err.message_id)
        return
    
    sent = await message.answer(
        "‚úÖ –°–ø–∞—Å–∏–±–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        "üìå –í—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚ûï –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥–∏\n"
        "üìã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏\n"
        "üè† –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏\n"
        "üìû –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
        "‚ÑπÔ∏è –∏ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –Ω–∞—Å!",
        reply_markup=get_main_inlineBtns_user()
    )
    await state.update_data(last_msg_id=sent.message_id)
    await state.clear()

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ
@user_private_router.message(StartStates.waiting_for_contact)
async def handle_invalid_contact(message: types.Message, state: FSMContext):
    try:
        await message.delete()
    except Exception as e:
        logging.warning(f"[INVALID CONTACT] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    data = await state.get_data()
    await delete_last_message(message, data)

    msg = await message.answer(
        "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
        reply_markup=get_send_number_kb_user()
    )
    await state.update_data(last_msg_id=msg.message_id)











# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


# –ó–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#..................................................................................................................................................
#..................................................................................................................................................





@user_private_router.callback_query(F.data == "record_user")
async def add_record_user(callback_query: CallbackQuery, session: AsyncSession):
    text, photo_path, kbds = await get_add_record_menu_user(session, level=0)
    sent_msg = await safe_edit_or_send_new(
        bot=callback_query.bot,
        message=callback_query.message,
        text=text,
        photo_path=photo_path,
        kb=kbds
    )
    await callback_query.answer()




@user_private_router.callback_query(UserAddRecordCallBack.filter())
async def add_record_menu_user(
    callback_query: CallbackQuery,
    callback_data: UserAddRecordCallBack,
    state: FSMContext,
    session: AsyncSession
):
    text, photo_path, kbds = await get_add_record_menu_user(
        session=session,
        level=callback_data.level,
        service_category=callback_data.service_category,
        service_id=callback_data.service_id,
        barber_id=callback_data.barber_id,
        name_btn=callback_data.name_btn,
        page=callback_data.page,
        date=callback_data.date,
        time=callback_data.time,
        state=state,
        callback_query=callback_query
    )

    if callback_data.level == 6:
        # 1Ô∏è‚É£ –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–º
        try:
            await callback_query.message.edit_text(
                text,
                parse_mode="HTML"
            )
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        # 2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞–ª–µ–Ω—å–∫–æ–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.answer(
            "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ",
            parse_mode="HTML"
        )

        # 3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        sent_msg = await callback_query.message.answer(
            "üìã –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_inlineBtns_user(),
            parse_mode="HTML"
        )
    else:
        # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —à–∞–≥–∏ ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π safe_edit_or_send_new –¥–ª—è —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–∞
        sent_msg = await safe_edit_or_send_new(
            bot=callback_query.bot,
            message=callback_query.message,
            text=text,
            photo_path=photo_path,
            kb=kbds
        )

    await state.update_data(last_msg_id=sent_msg.message_id)
    await callback_query.answer()
    





















# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\





# –í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#..................................................................................................................................................
#..................................................................................................................................................
#..................................................................................................................................................
@user_private_router.callback_query(F.data == "view_service_user")
async def user_services_list_start(callback_query: CallbackQuery, state: FSMContext, session: AsyncSession):
    text, kbds = await get_user_servives_list_content(session=session, level=0)
    await safe_edit_or_resend(callback_query.bot, callback_query.message, text, kbds, state)
    await callback_query.answer()



# –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞–ª–±–µ–∫–∏ ServiceslistCallBack
@user_private_router.callback_query(UserServiceslistCallBack.filter())
async def user_services_list_menu(callback_query: CallbackQuery, state: FSMContext, callback_data: UserServiceslistCallBack, session: AsyncSession):
    text, kbds = await get_user_servives_list_content(
        session=session,
        level=callback_data.level,
        category=callback_data.service_category,
        page=callback_data.page,
    )
    await safe_edit_or_resend(callback_query.bot, callback_query.message, text, kbds, state)
    await callback_query.answer()









# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\






# –í—ã–≤–æ–¥ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#..................................................................................................................................................
#..................................................................................................................................................
#..................................................................................................................................................

@user_private_router.callback_query(F.data == "my_records")
async def user_records_start(callback_query: CallbackQuery, session: AsyncSession):
    text, kbds = await get_user_records_list(session=session, level=0, user_id=callback_query.from_user.id)
    await safe_edit_message_text(callback_query.message, text, reply_markup=kbds)
    await callback_query.answer()


@user_private_router.callback_query(UserViewRecordsCallback.filter())
async def user_record_menu(callback_query: CallbackQuery, callback_data: UserViewRecordsCallback, session: AsyncSession):
    text, kbds = await get_user_records_list(
        session=session,
        level=callback_data.level,
        user_id=callback_query.from_user.id,
        page=callback_data.page,
        appointment_id=callback_data.appointment_id
    )
    await safe_edit_message_text(callback_query.message, text, reply_markup=kbds)
    await callback_query.answer()














#..................................................................................................................................................
#..................................................................................................................................................
#..................................................................................................................................................




# –ö–æ–º–∞–Ω–¥–∞ –û –Ω–∞—Å 
# –ö–æ–º–∞–Ω–¥–∞ –û –Ω–∞—Å 
@user_private_router.callback_query(F.data == "about")
async def about_cmd(callback_query: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()

    # 1. –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    try:
        await callback_query.message.delete()
    except Exception as e:
        logging.warning(f"[USER] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ '–û –Ω–∞—Å': {e}")

    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é
    latitude = 55.7558
    longitude = 37.6176

    loc_msg = await bot.send_location(
        chat_id=callback_query.message.chat.id,
        latitude=latitude,
        longitude=longitude
    )
    await state.update_data(last_msg_id=loc_msg.message_id)

    # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç "–û –Ω–∞—Å"
    text = (
        "<b>–û –Ω–∞—Å üíà</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>[–í–∞—à–µ –Ω–∞–∑–≤–∞–Ω–∏–µ]</b> ‚Äì –º–µ—Å—Ç–æ, –≥–¥–µ —Å—Ç—Ä–∏–∂–∫–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∏—Å–∫—É—Å—Å—Ç–≤–æ–º! ‚úÇÔ∏è\n\n"
        "<b>üî• –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å?</b>\n"
        "‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –±–∞—Ä–±–µ—Ä—ã —Å –æ–ø—ã—Ç–æ–º\n"
        "‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∏–∂–∫–∏\n"
        "‚Ä¢ –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ –º—É–∂—Å–∫–æ–≥–æ –∫–ª—É–±–∞\n"
        "‚Ä¢ –£—Ö–æ–¥ –∑–∞ –±–æ—Ä–æ–¥–æ–π –∏ —É—Å–∞–º–∏\n"
        "‚Ä¢ –¢–æ–ª—å–∫–æ —Ç–æ–ø–æ–≤—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞\n\n"
        "<b>üìç –ì–¥–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è?</b>\n"
        "üè† –ê–¥—Ä–µ—Å: [–í–∞—à –∞–¥—Ä–µ—Å]\n"
        "üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: [–í–∞—à –≥—Ä–∞—Ñ–∏–∫] –µ–∂–µ–¥–Ω–µ–≤–Ω–æ\n\n"
        "<b>üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n"
        "üì≤ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67\n"
        "üí¨ Telegram: @admin_username\n"
        "üåç Instagram: https://instagram.com/yourbarbershop"
    )

    about_msg = await bot.send_message(
        chat_id=callback_query.message.chat.id,
        text=text,
        reply_markup=get_callback_btns(btns={"üîô –ù–∞–∑–∞–¥": "cancel_user"}),
        parse_mode="HTML"
    )
    await state.update_data(last_msg_id=about_msg.message_id)

    await callback_query.answer()
    





# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\






    





@user_private_router.callback_query(UserRememberOkCallback.filter())
async def confirmation_record(callback_query: CallbackQuery, callback_data: UserRememberOkCallback, session: AsyncSession):

# –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å
    appointment = await orm_get_appointment_by_id(session, callback_data.appointment_id)

    if not appointment:
        await callback_query.answer("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await callback_query.message.delete()
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞
    appointment_datetime = datetime.combine(appointment.date_appointment, appointment.time_appointment)
    now = datetime.now()

    if now > appointment_datetime + timedelta(hours=2):
        await callback_query.answer("‚ö†Ô∏è –í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–µ–∫–ª–æ.")
        await callback_query.message.delete()
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
    if appointment.status in [AppointmentStatus.CONFIRMED, AppointmentStatus.CANCELLED]:
        await callback_query.answer("‚ö†Ô∏è –ó–∞–ø–∏—Å—å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    status_map = {
        "confirm": AppointmentStatus.CONFIRMED,
        "cancel": AppointmentStatus.CANCELLED
    }
    updated = await orm_update_appointment_status(session, callback_data.appointment_id, status_map[callback_data.status])

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback_query.message.delete()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏: {e}")

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if updated and callback_data.status == "confirm":
        remind_for_rating_time = appointment_datetime + timedelta(hours=1)
        await schedule_rating_request(
            bot=callback_query.bot,
            chat_id=callback_query.message.chat.id,
            barber_id=appointment.barber_id,
            appointment_id=callback_data.appointment_id,
            barber_name=appointment.barber_name,
            send_time=remind_for_rating_time
        )
        text = "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!"
    elif updated:
        text = "‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å."
    else:
        text = "‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞."

    await callback_query.answer(text)



@user_private_router.callback_query(UserRateBarberCallback.filter())
async def process_barber_rating(callback_query: CallbackQuery, callback_data: UserRateBarberCallback, session: AsyncSession):

    already_rated = await orm_check_rating_exists(session, callback_data.appointment_id)
    if already_rated:
        await callback_query.answer("‚ö†Ô∏è –í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É.", show_alert=True)
        return

    await orm_add_barber_rating(
        session,
        appointment_id=callback_data.appointment_id,
        barber_id=callback_data.barber_id,
        user_id=callback_query.from_user.id,
        score=callback_data.score
    )

    try:
        await callback_query.message.delete()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ü–µ–Ω–∫–∏: {e}")

    await callback_query.answer(f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É: {callback_data.score} ‚≠êÔ∏è!")

@user_private_router.callback_query(UserRateDeclineCallback.filter())
async def process_rating_decline(callback_query: CallbackQuery, callback_data: UserRateDeclineCallback, session: AsyncSession):

    already_rated = await orm_check_rating_exists(session, callback_data.appointment_id)
    if already_rated:
        await callback_query.answer("‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω–∫–∏.", show_alert=True)
        return

    await orm_add_rating_decline(
        session,
        appointment_id=callback_data.appointment_id,
        barber_id=callback_data.barber_id,
        user_id=callback_query.from_user.id
    )

    try:
        await callback_query.message.delete()
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ü–µ–Ω–∫–∏: {e}")

    await callback_query.answer("‚ùå –û—Ü–µ–Ω–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ —É–∑–Ω–∞—Ç—å —Å–≤–æ–π id
@user_private_router.message(Command("id"))
async def signup_cmd(message:types.Message):
    await message.answer(f"–í–∞—à id: {message.from_user.id}")






















# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–∂–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def delete_last_message(env, data):
    """
    –£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å.
    –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ).
    """
    if "last_msg_id" not in data:
        return

    chat_id = env.message.chat.id if isinstance(env, CallbackQuery) else env.chat.id
    bot = env.bot if isinstance(env, CallbackQuery) else env._bot
    last_msg_id = data["last_msg_id"]

    try:
        await bot.delete_message(chat_id, last_msg_id)
        logging.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: id={last_msg_id}")
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (id={last_msg_id}): {e}")







async def replace_message_with_photo_or_text(bot, message, text, photo_path, kb):
    chat_id = message.chat.id

    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await message.delete()
        logging.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–º–µ–Ω–æ–π: id={message.message_id}")
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (id={message.message_id}): {e}")

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ ‚Äî –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
    if photo_path:
        try:
            photo_file = FSInputFile(photo_path)
            return await bot.send_photo(
                chat_id=chat_id,
                photo=photo_file,
                caption=text,
                reply_markup=kb,
                parse_mode="HTML"
            )
        except FileNotFoundError:
            logging.error(f"–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {photo_path}")
            return await bot.send_message(
                chat_id=chat_id,
                text=f"{text}\n‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
                reply_markup=kb,
                parse_mode="HTML"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            return await bot.send_message(
                chat_id=chat_id,
                text=f"{text}\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ.",
                reply_markup=kb,
                parse_mode="HTML"
            )

    # –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    try:
        return await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=kb,
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")





async def safe_edit_or_resend(bot, message, text, reply_markup, state):
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –µ—Å–ª–∏ –º–æ–∂–Ω–æ, –∏–Ω–∞—á–µ —É–¥–∞–ª—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π message_id –≤ state.
    """
    try:
        await message.edit_text(text, reply_markup=reply_markup, parse_mode="HTML")
        await state.update_data(last_msg_id=message.message_id)
        return
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (id={message.message_id}): {e}")

    # –ü–∞–¥–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–Ω–æ–≤–æ
    try:
        await message.delete()
    except Exception:
        pass

    new_msg = await bot.send_message(
        chat_id=message.chat.id,
        text=text,
        reply_markup=reply_markup,
        parse_mode="HTML"
    )
    await state.update_data(last_msg_id=new_msg.message_id)





async def safe_edit_message_text(message, text, reply_markup=None, parse_mode="HTML"):
    try:
        await message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
            return
        raise







    
# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã 
@user_private_router.callback_query(StateFilter("*"), F.data == "cancel_user")
async def cancel_user(callback_query: CallbackQuery, state: FSMContext):  
    await state.clear()
    await callback_query.answer()
    main_menu_text = (
        "<b>üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∏–∂–µ:\n")
    sent_message = None

    # 1Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    try:
        sent_message = await callback_query.message.edit_text(
            main_menu_text,
            reply_markup=get_main_inlineBtns_user()
        )
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # 2Ô∏è‚É£ –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –ø–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å
    if sent_message is None:
        try:
            await callback_query.message.delete()
            logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ.")
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        # 3Ô∏è‚É£ –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        sent_message = await callback_query.message.answer(
            main_menu_text,
            reply_markup=get_main_inlineBtns_user()
        )

    await state.update_data(last_msg_id=sent_message.message_id)








async def safe_edit_or_send_new(
    bot: Bot,
    message: types.Message,
    text: str,
    photo_path: str | None = None,
    kb: types.InlineKeyboardMarkup | None = None
) -> types.Message:
    chat_id = message.chat.id

    # 1Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    try:
        if photo_path is None:
            return await message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        else:
            # –î–ª—è —Ñ–æ—Ç–æ –≤ Telegram –Ω–µ—Ç edit_caption –±–µ–∑ —Ñ–æ—Ç–æ ‚Äî —Å—á–∏—Ç–∞–µ–º —Ñ–æ—Ç–æ –Ω–æ–≤—ã–º
            raise Exception("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ ‚Äî —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ.")
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (id={message.message_id}): {e}")

    # 2Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å
    try:
        await message.delete()
        logging.info(f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (id={message.message_id})")
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (id={message.message_id}): {e}")

    # 3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if photo_path:
        try:
            photo_file = FSInputFile(photo_path)
            return await bot.send_photo(
                chat_id=chat_id,
                photo=photo_file,
                caption=text,
                reply_markup=kb,
                parse_mode="HTML"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
            return await bot.send_message(
                chat_id=chat_id,
                text=f"{text}\n‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.",
                reply_markup=kb,
                parse_mode="HTML"
            )
    else:
        return await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=kb,
            parse_mode="HTML"
        )
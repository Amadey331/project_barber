from sqlalchemy.ext.asyncio import AsyncSession


from utils.paginator import Paginator


from database.orm_query import (
    orm_get_actual_appointments_by_user_id,
    orm_get_service_by_id,
    orm_get_barber_by_id,
    orm_delete_appointment_if_possible
    
)
from kbds.inline_user import get_main_inlineBtns_user,get_user_records_btns

def pages(paginator: Paginator):
    btns = dict()
    if paginator.has_previous():
        btns["‚óÄ –ü—Ä–µ–¥."] = "previous"

    if paginator.has_next():
        btns["–°–ª–µ–¥. ‚ñ∂"] = "next"

    return btns

async def user_records(session: AsyncSession, user_id: int, appointment_id: int, page: int = 1):
    appointments = await orm_get_actual_appointments_by_user_id(session, user_id)

    if not appointments:
        return "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.", get_main_inlineBtns_user()

    paginator = Paginator(appointments, page=page)
    appointment = paginator.get_page()[0]

    # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–æ–ª—è, –∞ –Ω–µ –¥–µ–ª–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã
    service_name = appointment.service_name or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞"
    service_price = f"{round(appointment.service_price, 2)} ‚ÇΩ" if appointment.service_price else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    barber_name = appointment.barber_name or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞—Ä–±–µ—Ä"

    text = (
        f"üìå <b>–£—Å–ª—É–≥–∞:</b> {service_name}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {service_price}\n"
        f"üíà <b>–ë–∞—Ä–±–µ—Ä:</b> {barber_name}\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {appointment.date_appointment.strftime('%d.%m.%Y')}\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {appointment.time_appointment.strftime('%H:%M')}\n"
        f"\nüìÑ <i>–ó–∞–ø–∏—Å—å {paginator.page} –∏–∑ {paginator.pages}</i>"
    )

    pagination_btns = pages(paginator)

    kbds = get_user_records_btns(
        level=0,
        page=page,
        pagination_btns=pagination_btns,
        appointment_id=appointment.id
    )

    return text, kbds


async def user_delete_record(session: AsyncSession, user_id: int, page: int, appointment_id: int):
    success = await orm_delete_appointment_if_possible(session, appointment_id)

    if success:
        return "‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.", get_main_inlineBtns_user()
    else:
        return "‚ùå –ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 3 —á–∞—Å–∞ –¥–æ –µ—ë –Ω–∞—á–∞–ª–∞.", get_main_inlineBtns_user()



async def get_user_records_list(
        session: AsyncSession,
        level: int,
        user_id: int,
        page: int = 1,
        appointment_id: int | None = None
):
    if level == 0:
        return await user_records(session=session, user_id=user_id, page=page, appointment_id=appointment_id)
    if level == 1:
        return await user_delete_record(session=session, user_id=user_id, page=page, appointment_id=appointment_id)
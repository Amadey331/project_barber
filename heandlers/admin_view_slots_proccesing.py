from sqlalchemy.ext.asyncio import AsyncSession

from utils.paginator import Paginator
from utils.format import format_rating
from database.orm_query import (
    orm_get_all_barbers,
    orm_get_barber_schedule_by_id,
    orm_get_available_dates_for_view_slots,
    orm_get_appointments_for_view_slots
    )

from database.models import AppointmentStatus
from kbds.inline_admin import (
    get_barbers_list_btns_for_view_slots,
    get_main_inlineBtns_admin,
    get_select_date_kb_for_view,
    get_what_do_for_view,
    AdminViewSlotsCallBack
    )

from datetime import datetime


from aiogram.fsm.state import StatesGroup, State

from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from fsm.admin import AdminDeleteRecordFSM



from utils.plular_years import plural_years


STATUS_LABELS = {
    AppointmentStatus.PENDING: "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
    AppointmentStatus.CONFIRMED: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
    AppointmentStatus.CANCELLED: "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞",
    AppointmentStatus.ADDED_BY_ADMIN: "üìå –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º"
}


BARBER_SPECIALIZATIONS = {
    "classic_barber": "üíà –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –±–∞—Ä–±–µ—Ä",
    "beard_specialist": "üßî‚Äç‚ôÇÔ∏è –ë–æ—Ä–æ–¥–∏—Å—Ç",
    "stylist_barber": "üé® –°—Ç–∞–π–ª–∏—Å—Ç",
    "universal_barber": "üéØ –ë–∞—Ä–±–µ—Ä-—É–Ω–∏–≤–µ—Ä—Å–∞–ª"
}


WEEKDAY_LABELS = {
    0: "–ü–Ω",
    1: "–í—Ç",
    2: "–°—Ä",
    3: "–ß—Ç",
    4: "–ü—Ç",
    5: "–°–±",
    6: "–í—Å"
}


def pages(paginator: Paginator):
    btns = dict()
    if paginator.has_previous():
        btns["‚óÄ –ü—Ä–µ–¥."] = "previous"

    if paginator.has_next():
        btns["–°–ª–µ–¥. ‚ñ∂"] = "next"

    return btns

async def view_slots_select_barber(session, level, page):
    barbers = await orm_get_all_barbers(session)
    paginator = Paginator(barbers, page=page)

    if not paginator.get_page():
        return {
            "text": "–ë–∞—Ä–±–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            "photo": None,
            "kb": get_main_inlineBtns_admin()
        }

    barber = paginator.get_page()[0]

    rating_text = format_rating(barber.rating_sum, barber.rating_count)

    text = f"""
<b>üë§ –ò–º—è –±–∞—Ä–±–µ—Ä–∞:</b> {barber.name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{barber.phone}</code>
üíº <b>–°—Ç–∞–∂:</b> {plural_years(barber.experience)}
üéØ <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {BARBER_SPECIALIZATIONS[barber.specialization]}
‚≠êÔ∏è <b>{rating_text}</b>
üéØ <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {BARBER_SPECIALIZATIONS[barber.specialization]}
    """

    schedule = await orm_get_barber_schedule_by_id(session, barber.id)
    if schedule:
        text += "\n<b>üìÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b>\n"
        for weekday in sorted(schedule):
            start, end = schedule[weekday]
            text += f"‚Ä¢ {WEEKDAY_LABELS[weekday]} ‚Äî {start.strftime('%H:%M')}‚Äì{end.strftime('%H:%M')}\n"
    else:
        text += "\nüìÖ <i>–ì—Ä–∞—Ñ–∏–∫ –Ω–µ –∑–∞–¥–∞–Ω</i>\n"

    kbds = get_barbers_list_btns_for_view_slots(
        level=level,
        barber_id=barber.id,
        barber_name=barber.name,
        page=page,
        pagination_btns=pages(paginator)
    )

    return {
        "text": text,
        "photo": barber.photo_path,
        "kb": kbds
    }




async def view_slots_select_date(
        session,
        level, 
        barber_id, 
        barber_name

):
    dates_with_slots = await orm_get_available_dates_for_view_slots(session, barber_id)

    if not dates_with_slots:
        text = "‚ö†Ô∏è –£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞—Ä–±–µ—Ä–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π."
        return text, get_main_inlineBtns_admin()

    text = "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:"

    kbds = get_select_date_kb_for_view(
        dates=dates_with_slots,
        level=level,
        barber_id=barber_id,
        barber_name = barber_name
        
    )

    return text, kbds


async def view_slots(session: AsyncSession, level: int, barber_id: int, barber_name:str, page: int, date: str):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø–∏—Å–µ–π –±–∞—Ä–±–µ—Ä–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É."""
    date_obj = datetime.strptime(date, "%d.%m.%Y").date()

    appointments = await orm_get_appointments_for_view_slots(session, barber_id, date_obj)

    if not appointments:
        dates_with_slots = await orm_get_available_dates_for_view_slots(session, barber_id)
        kbds = get_select_date_kb_for_view(
        dates=dates_with_slots,
        level=level-1,
        barber_id=barber_id,
        barber_name=barber_name
        
    )
        return "‚ÑπÔ∏è –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.", kbds

    text_lines = [f"üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ <b>{date}</b> –¥–ª—è –±–∞—Ä–±–µ—Ä–∞ <b>{barber_name}</b>:\n"]

    for i, (app_id, time, name, phone, service_name, duration, status) in enumerate(appointments, start=1):
        time_str = time.strftime("%H:%M")
        status_text = STATUS_LABELS.get(status, "üü° –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        text_lines.append(
            f"<b>{i}.</b> üîñ <b>ID:</b> <code>{app_id}</code>\n"
            f"   üïí <b>–í—Ä–µ–º—è:</b> <i>{time_str}</i> ‚Äî <i>{service_name}</i> ({duration} –º–∏–Ω)\n"
            f"   üë§ <b>–ò–º—è:</b> {name}\n"
            f"   üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
            f"   üìå <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
        )
    
    text = "\n".join(text_lines)

    
    kbds = get_what_do_for_view(level = level, barber_id=barber_id, barber_name = barber_name, date = date)
    return text, kbds



async def get_view_slots_menu_admin(
        session: AsyncSession,
        level: int,
        barber_id: int | None = None,
        barber_name: str | None = None,
        page: int = 1,
        date: str | None = None,
        state: StatesGroup | None = None
):
    if level == 0:
        return await view_slots_select_barber(session, level, page)
    if level == 1:
        text, kbds = await view_slots_select_date(session, level, barber_id, barber_name)
        return {"text": text, "photo": None, "kb": kbds}
    if level == 2:
        text, kbds = await view_slots(session, level, barber_id, barber_name, page, date)
        return {"text": text, "photo": None, "kb": kbds}
    if level == 3:
        await state.set_state(AdminDeleteRecordFSM.appointment_id)
        await state.update_data(barber_id=barber_id, barber_name=barber_name, date=date)

        date_obj = datetime.strptime(date, "%d.%m.%Y").date()
        appointments = await orm_get_appointments_for_view_slots(session, barber_id, date_obj)

        text_lines = [f"üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ <b>{date}</b> –¥–ª—è –±–∞—Ä–±–µ—Ä–∞ <b>{barber_name}</b>:\n"]
        text = "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"

        for i, (app_id, time, name, phone, service_name, duration, status) in enumerate(appointments, start=1):
            time_str = time.strftime("%H:%M")
            text_lines.append(
                f"<b>{i}.</b> üîñ <b>ID:</b> <code>{app_id}</code>\n"
                f"   üïí <b>–í—Ä–µ–º—è:</b> <i>{time_str}</i> ‚Äî <i>{service_name}</i> ({duration} –º–∏–Ω)\n"
                f"   üë§ <b>–ò–º—è:</b> {name}\n"
                f"   üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
            )
        text += "\n".join(text_lines)

        kbds = InlineKeyboardBuilder()
        kbds.row(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=AdminViewSlotsCallBack(
                    level=2,
                    barber_id=barber_id,
                    barber_name=barber_name,
                    page=1,
                    date=date
                ).pack()
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_admin"
            )
        )
        return {"text": text, "photo": None, "kb": kbds.as_markup()}
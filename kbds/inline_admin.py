from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from aiogram.utils.keyboard import InlineKeyboardBuilder

from aiogram.filters.callback_data import CallbackData

from datetime import datetime, timedelta, date, time

from typing import List, Dict, Tuple

from utils.format import format_date_rus











class AdminServicesListCallBack(CallbackData, prefix = "admin_services_list"):
    level: int
    service_category: str | None = None
    page: int = 1
    service_id : int | None = None
    name_btn: str | None = None



class AdminBarbersListCallback(CallbackData, prefix = "admin_barbers_list"):
    page: int = 1
    barber_id: int|None = None
    name_btn: str | None = None



# –î–ª—è –¥–æ–±–æ–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º –∑–∞–ø–∏—Å–µ–π
class AdminAddRecordCallBack(CallbackData, prefix = "add_record_admin"):
    level : int
    service_category: str |None = None
    service_id: int | None = None
    barber_id: int|None = None
    name_btn: str | None = None 
    page: int = 1
    date: str | None = None  
    time: str | None = None

class AdminViewSlotsCallBack(CallbackData, prefix = "view_slots_admin"):
    level : int
    barber_id: int | None = None
    barber_name: str | None = None
    page: int = 1
    date: str | None = None
    


def get_main_inlineBtns_admin():

    kbds = InlineKeyboardBuilder()
    kbds.add(InlineKeyboardButton(text="‚ûï –ó–∞–ø–∏—Å–∞—Ç—å" , callback_data="add_recod_admin"))    
    kbds.add(InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∏" , callback_data="view_slots_admin"))    
    kbds.add(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" , callback_data="edit"))
    kbds.add(InlineKeyboardButton(text="üìú –ñ—É—Ä–Ω–∞–ª", callback_data="list_admin"))
    kbds.add(InlineKeyboardButton(text="üîß –ê–¥–º–∏–Ω—ã" , callback_data="edit_admin_list"))
    kbds.add(InlineKeyboardButton(text="üè† –í—ã–π—Ç–∏" , callback_data="exit_admin"))
    kbds.add(InlineKeyboardButton(text="üìï –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ" , callback_data="anagement"))    
    
    return kbds.adjust(2).as_markup()





def get_weekday_selection_kb_admin():
    days = {
        "–ü–Ω": 0,
        "–í—Ç": 1,
        "–°—Ä": 2,
        "–ß—Ç": 3,
        "–ü—Ç": 4,
        "–°–±": 5,
        "–í—Å": 6
    }

    kb = InlineKeyboardBuilder()

    for name, value in days.items():
        kb.add(InlineKeyboardButton(text=name, callback_data=f"day_{value}"))

    
    kb.add(InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="weekday_selection_done"))

    
    kb.add(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",
        callback_data="cancel_admin"))
    
    return kb.adjust(3).as_markup()








# –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–ø–∏—Å–∫–∞ –±–∞—Ä–±–µ—Ä–æ–≤
def get_barbers_list_btns_admin(
        *,
        page: int,
        pagination_btns: dict,
        barber_id: int,
        sizes: tuple[int] = (2, 1)
):
    keyboard = InlineKeyboardBuilder()

    keyboard.add(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å',
        callback_data=AdminBarbersListCallback( barber_id = barber_id, name_btn = "delete").pack()))

    keyboard.add(InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
        callback_data=AdminBarbersListCallback(barber_id = barber_id, name_btn = "edit").pack()))
    
    keyboard.adjust(*sizes)
    row = []

    for text, menu_name in pagination_btns.items():
        if menu_name == "next":
            row.append(InlineKeyboardButton(text=text,
                callback_data=AdminBarbersListCallback(
                    
                    page=page + 1
                ).pack()))
        elif menu_name == "previous":
            row.append(InlineKeyboardButton(text=text,
                callback_data=AdminBarbersListCallback(
 
                    page=page - 1
                ).pack()))
            
    
    keyboard.add(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É',
        callback_data=AdminBarbersListCallback(barber_id = barber_id, name_btn = "unlink_service").pack()))

    keyboard.add(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",
        callback_data="cancel_admin"))
    keyboard.adjust(2)
    return keyboard.row(*row).as_markup()





def get_barbers_list_btns_for_record_admin(
        *,
        page: int,
        pagination_btns: dict,
        barber_id: int,
        sizes: tuple[int] = (2, 1)
):
    keyboard = InlineKeyboardBuilder()

    keyboard.add(InlineKeyboardButton(text='–ó–∞–ø–∏—Å–∞—Ç—å',
        callback_data=AdminAddRecordCallBack( barber_id = barber_id, name_btn = "record").pack()))

    keyboard.add(InlineKeyboardButton(text='–°–ª–æ—Ç—ã',
        callback_data=AdminAddRecordCallBack(barber_id = barber_id, name_btn = "slots").pack()))
    
    keyboard.adjust(*sizes)
    row = []

    for text, menu_name in pagination_btns.items():
        if menu_name == "next":
            row.append(InlineKeyboardButton(text=text,
                callback_data=AdminAddRecordCallBack(
                    
                    page=page + 1
                ).pack()))
        elif menu_name == "previous":
            row.append(InlineKeyboardButton(text=text,
                callback_data=AdminAddRecordCallBack(
 
                    page=page - 1
                ).pack()))
            
            
    keyboard.add(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",
        callback_data="cancel_admin"))
    return keyboard.row(*row).as_markup()





def generate_time_slot_btns_admin(
    selected_date: date,
    schedule: Dict[int, Tuple[time, time]],
    appointments: List[Tuple[time, time]],
    service_duration_minutes: int
) -> InlineKeyboardMarkup:
    weekday = selected_date.weekday()

    if weekday not in schedule:
        kb = InlineKeyboardBuilder()
        kb.add(InlineKeyboardButton(text="‚õî –ù–µ—Ç —Ä–∞–±–æ—Ç—ã –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å", callback_data="back_to_dates"))
        return kb.as_markup()

    start_time, end_time = schedule[weekday]
    slots = []

    current = datetime.combine(selected_date, start_time)
    end = datetime.combine(selected_date, end_time)

    step = timedelta(minutes=30)
    service_delta = timedelta(minutes=service_duration_minutes)

    while current + service_delta <= end:
        slot_start = current.time()
        slot_end = (current + service_delta).time()

        overlap = False
        for busy_start, busy_end in appointments:
            if busy_start < slot_end and busy_end > slot_start:
                overlap = True
                break

        if not overlap:
            slots.append(slot_start.strftime("%H:%M"))

        current += step

    kb = InlineKeyboardBuilder()
    for t in slots:
        kb.add(InlineKeyboardButton(text=t, callback_data=f"select_time:{t}"))

    kb.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_dates"))
    return kb.adjust(4).as_markup()







def generate_date_buttons(available_dates: List[date]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for d in available_dates:
        kb.add(InlineKeyboardButton(
            text=d.strftime("%d.%m"),
            callback_data=f"select_date:{d.isoformat()}"
        ))
    kb.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_barbers"))
    return kb.adjust(4).as_markup()






def get_admin_services_list_btns(
        *,  
        level: int,
        category: str,  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å str, –∞ –Ω–µ int
        page: int,
        pagination_btns: dict,
        service_id: int,
        sizes: tuple[int] = (2, 1)
):
    keyboard = InlineKeyboardBuilder()

    keyboard.add(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å',
        callback_data=AdminServicesListCallBack(level=level, service_category=category, service_id=service_id, name_btn = "delete").pack()))

    keyboard.add(InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
        callback_data=AdminServicesListCallBack(level=level, service_category=category, service_id=service_id, name_btn = "edit").pack()))



    keyboard.adjust(*sizes)

    row = []
    for text, menu_name in pagination_btns.items():
        if menu_name == "next":
            row.append(InlineKeyboardButton(text=text,
                callback_data=AdminServicesListCallBack(
                    level=level,
                    service_category=category,  
                    page=page + 1
                ).pack()))
        elif menu_name == "previous":
            row.append(InlineKeyboardButton(text=text,
                callback_data=AdminServicesListCallBack(
                    level=level,
                    service_category=category,  
                    page=page - 1
                ).pack()))
            
    keyboard.add(InlineKeyboardButton(
    text='‚ûï –°–≤—è–∑–∞—Ç—å –±–∞—Ä–±–µ—Ä–∞',
    callback_data=AdminServicesListCallBack(
        level=level,
        service_category=category,
        service_id=service_id,
        name_btn="link_barber"
    ).pack()
))
    keyboard.add(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",
        callback_data="cancel_admin"))
    keyboard.adjust(2)
    return keyboard.row(*row).as_markup()








def get_admin_services_category_btns(*, level:int, sizes: tuple[int] = (2,)):
    keyboard = InlineKeyboardBuilder()
    btns = {
            "‚úÇÔ∏è –°—Ç—Ä–∏–∂–∫–∏": "haircut",
            "üßî –ë–æ—Ä–æ–¥–∞ –∏ –±—Ä–∏—Ç—å—ë": "beard",
            "üíÜ‚Äç‚ôÇÔ∏è –£—Ö–æ–¥ –∑–∞ –≤–æ–ª–æ—Å–∞–º–∏ –∏ –∫–æ–∂–µ–π": "care",
            "üé≠ –°—Ç–∞–π–ª–∏–Ω–≥": "styling",
            "üéü –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —É—Å–ª—É–≥–∏": "combo",
            "üîô –û—Ç–º–µ–Ω–∞": "cancel_admin"
    }

    for text, data in btns.items():
        if text != "üîô –û—Ç–º–µ–Ω–∞":
            keyboard.add(InlineKeyboardButton(text=text,
                    callback_data=AdminServicesListCallBack(level=level+1, service_category=data).pack()))      
        else:
            keyboard.add(InlineKeyboardButton(text=text,
                    callback_data="cancel_admin"))
    return keyboard.adjust(*sizes).as_markup()







# –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á—Ç–æ —Ö–æ—á–µ—Ç —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∞—Ä–±–µ—Ä–æ–≤
def get_barbers_list_what_do_inline():
    barbers_list_what_do = InlineKeyboardBuilder()
    
    barbers_list_what_do.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å",callback_data = "add_barber" ))
    barbers_list_what_do.add(InlineKeyboardButton(text="üìú –°–ø–∏—Å–æ–∫",callback_data = AdminBarbersListCallback().pack() ))
    barbers_list_what_do.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥",callback_data = "cancel_admin" ))
    
    return barbers_list_what_do.adjust(2).as_markup()
# ...................................................................................................................................................................
# ...................................................................................................................................................................
# ...................................................................................................................................................................










# —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ–±–æ–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º –∑–∞–ø–∏—Å–µ–π

# ...................................................................................................................................................................
# ...................................................................................................................................................................
# ...................................................................................................................................................................
def get_service_categoty_for_record(session, level):
    kbds = InlineKeyboardBuilder()
    btns={
            "‚úÇÔ∏è –°—Ç—Ä–∏–∂–∫–∏": "haircut",
            "üßî –ë–æ—Ä–æ–¥–∞ –∏ –±—Ä–∏—Ç—å—ë": "beard",
            "üíÜ‚Äç‚ôÇÔ∏è –£—Ö–æ–¥ –∑–∞ –≤–æ–ª–æ—Å–∞–º–∏ –∏ –∫–æ–∂–µ–π": "care",
            "üé≠ –°—Ç–∞–π–ª–∏–Ω–≥": "styling",
            "üéü –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —É—Å–ª—É–≥–∏": "combo"
            
    }
    row = []
    for name_btn, data_btn in btns.items():
        kbds.button(
            text=name_btn,
            callback_data=AdminAddRecordCallBack(level=level+1, service_category=data_btn).pack()
        )
    kbds.add(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",
    callback_data="cancel_admin"))
    kbds.adjust(2)
    return kbds.as_markup()




# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–∏
def get_services_list_btns_for_record(
        *,  
        level: int,
        page: int,
        pagination_btns: dict,
        service_category:str,
        service_id: int,
        sizes: tuple[int] = (2, 1)
):
    keyboard = InlineKeyboardBuilder()





    keyboard.adjust(*sizes)

    row = []
    for text, menu_name in pagination_btns.items():
        if menu_name == "next":
            row.append(InlineKeyboardButton(text=text,
                callback_data=AdminAddRecordCallBack(
                    level=level,
                    service_category=service_category,  
                    page=page + 1
                ).pack()))
        elif menu_name == "previous":
            row.append(InlineKeyboardButton(text=text,
                callback_data=AdminAddRecordCallBack(
                    level=level,
                    service_category=service_category,  
                    page=page - 1
                ).pack()))
            
    keyboard.add(InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å",
        callback_data=AdminAddRecordCallBack(
            level = level+1,
            service_category= service_category,
            page = 1,
            service_id= service_id,
            name_btn= "select_service"
        ).pack()))

    keyboard.add(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",
        callback_data="cancel_admin"))
    
    return keyboard.row(*row).as_markup()






# –ü–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –º–µ–Ω—é –±–∞—Ä–±–µ—Ä–æ–≤ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∞–¥–º–∏–Ω–æ–º
def get_barbers_list_btns_for_record(
        *,
        level: int,
        service_category:str,
        service_id: int,
        barber_id: int,
        page: int,
        pagination_btns: dict,
        sizes: tuple[int] = (2, 1)
):
    keyboard = InlineKeyboardBuilder()


    

    row = []

    for text, menu_name in pagination_btns.items():
        if menu_name == "next":
            row.append(InlineKeyboardButton(text=text,
                callback_data=AdminAddRecordCallBack(
                    level= level, 
                    service_id= service_id,
                    barber_id=barber_id,
                    page=page + 1
                ).pack()))
        elif menu_name == "previous":
            row.append(InlineKeyboardButton(text=text,
                callback_data=AdminAddRecordCallBack(
                    level= level,
                    barber_id=barber_id,
                    service_id=service_id,
                    page=page - 1
                ).pack()))

    
    keyboard.add(InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å',
        callback_data=AdminAddRecordCallBack(
            level = level+1 ,
            service_category=service_category,
            service_id= service_id,
            barber_id= barber_id,
            name_btn="select_barber").pack()))

    keyboard.add(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",
        callback_data="cancel_admin"))
    keyboard.adjust(2)
    return keyboard.row(*row).as_markup()








# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞ 14 –¥–Ω–µ–π.
# –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:  –≤—ã–≤–æ–¥–∏—Ç—Å—è –Ω–µ –±–æ–ª—å—à–µ 14 –∫–Ω–æ–ø–æ–∫ —Å –¥–∞—Ç–æ–π (–ø–Ω: 14:02)
def get_select_date_kb_for_record(dates, level, service_category, service_id, barber_id):
    kbds = InlineKeyboardBuilder()

   
    for date_obj in dates:
        display_text = format_date_rus(date_obj)  # –í –∫–Ω–æ–ø–∫–µ
        date_str = date_obj.strftime("%d.%m.%Y")  # –í callback

        kbds.add(InlineKeyboardButton(
            text=display_text,
            callback_data=AdminAddRecordCallBack(
                level=level + 1,
                service_category=service_category,
                service_id=service_id,
                barber_id=barber_id,
                name_btn="select_date",
                page=0,
                date=date_str  # üëà —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ 12.05.2025
            ).pack()
        ))
    
    kbds.add(InlineKeyboardButton(  # –ù–∞–∑–∞–¥
        text="üîô –ù–∞–∑–∞–¥",
        callback_data=AdminAddRecordCallBack(
            level=level - 1,
            service_category=service_category,
            service_id=service_id,
            page=1
        ).pack()
    ))
    kbds.adjust(2)
    return kbds.as_markup()









# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
def get_select_time_kb_for_record(slots, level, service_category, service_id, barber_id, date):
    keyboard = InlineKeyboardBuilder()

    for slot_time in slots:
        text = slot_time.strftime("%H:%M")
        
        time_str = slot_time.strftime("%H_%M")

        keyboard.add(
            InlineKeyboardButton(
                text=text,
                callback_data=AdminAddRecordCallBack(
                    level=level + 1,
                    service_category=service_category,
                    service_id=service_id,
                    barber_id=barber_id,
                    date=date,
                    name_btn="select_time",
                    page=0,
                    time=time_str
                ).pack()
            )
        )

    keyboard.adjust(3)
    keyboard.row(
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data=AdminAddRecordCallBack(
                level=level - 1,
                service_category=service_category,
                service_id=service_id,
                barber_id=barber_id,
                page=1,
                date=date
            ).pack()
        )
    )

    return keyboard.as_markup()











# ...................................................................................................................................................................
# ...................................................................................................................................................................
# ...................................................................................................................................................................



# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

def get_barbers_list_btns_for_view_slots(
        *,
        level: int,
        barber_id: int,
        barber_name: str,
        page: int,
        pagination_btns: dict,
        sizes: tuple[int] = (2, 1)
):
    kbds = InlineKeyboardBuilder()


    

    row = []

    for text, menu_name in pagination_btns.items():
        if menu_name == "next":
            row.append(InlineKeyboardButton(text=text,
                callback_data=AdminViewSlotsCallBack(
                    level= level, 
                    barber_id=barber_id,
                    page=page + 1
                ).pack()))
        elif menu_name == "previous":
            row.append(InlineKeyboardButton(text=text,
                callback_data=AdminViewSlotsCallBack(
                    level= level,
                    barber_id=barber_id,
                    page=page - 1
                ).pack()))

    
    kbds.add(InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å',
        callback_data=AdminViewSlotsCallBack(
            level = level+1 ,
            barber_id= barber_id,
            barber_name= barber_name,
            name_btn="select_barber").pack()))

    kbds.add(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",
        callback_data="cancel_admin"))
    kbds.adjust(2)
    return kbds.row(*row).as_markup()







def get_select_date_kb_for_view(dates: list[date], level: int, barber_id: int, barber_name: str):
    kbds = InlineKeyboardBuilder()

    for d in dates:
        display_text = format_date_rus(d)  # –í –∫–Ω–æ–ø–∫–µ
        date_str = d.strftime("%d.%m.%Y")  # –í callback
        kbds.add(InlineKeyboardButton(
            text=display_text,
            callback_data=AdminViewSlotsCallBack(
            level=level + 1, \
            barber_id=barber_id,
            barber_name=barber_name,
            date=date_str).pack()))
        
    
    kbds.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=AdminViewSlotsCallBack(level=level - 1).pack()))
    kbds.add(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",
    callback_data="cancel_admin"))
    kbds.adjust(2)
    return kbds.as_markup()








def get_what_do_for_view(level: int, barber_id: int, barber_name: str, date: str):
    kbds = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å
    kbds.row(
        InlineKeyboardButton(
            text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å",
            callback_data=AdminViewSlotsCallBack(
                level=level + 1,
                barber_id=barber_id,
                barber_name=barber_name,
                date=date,
                page=1  # –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å
            ).pack()
        )
    )

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    kbds.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=AdminViewSlotsCallBack(
                level=level - 1,
                barber_id=barber_id,
                barber_name=barber_name,
                page=1,
                date=date
            ).pack()
        )
    )

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    kbds.row(
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="cancel_admin"
        )
    )
    kbds.adjust(2)
    return kbds.as_markup()
















# text —Ç–æ —á—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ –Ω–∞ –∫–Ω–æ–ø–∫–µ callback_data —Ç–æ —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —ç—Ç–æ –Ω–µ –≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
def get_callback_btns(
        *,
        btns: dict[str,str],
        sizes: tuple[int] = (2,)):
    keyboard = InlineKeyboardBuilder()
    for text, data in btns.items():
        keyboard.add(InlineKeyboardButton(text = text, callback_data = data))

    return keyboard.adjust(*sizes).as_markup()







def get_confirm_delete_barber_kb(barber_id: int):
    return get_callback_btns(btns={
        "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ": f"confirm_delete_barber_{barber_id}",
        "‚ùå –û—Ç–º–µ–Ω–∞": "cancel_admin"
    })
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select,update, delete, and_ , extract, func
from sqlalchemy.exc import IntegrityError

from database.models import Admins,Services,Barbers, BarberSchedule,Users, Appointment,AppointmentHistory, BarberService, AdminLog,AppointmentStatus,BarberRatingHistory

from datetime import time, datetime, timedelta, date

from sqlalchemy.orm import selectinload, joinedload



SERVICE_CATEGORIES_REVERSED = {
    "haircut": "‚úÇÔ∏è –°—Ç—Ä–∏–∂–∫–∏",
    "beard": "üßî –ë–æ—Ä–æ–¥–∞ –∏ –±—Ä–∏—Ç—å—ë",
    "care": "üíÜ‚Äç‚ôÇÔ∏è –£—Ö–æ–¥ –∑–∞ –≤–æ–ª–æ—Å–∞–º–∏ –∏ –∫–æ–∂–µ–π",
    "styling": "üé≠ –°—Ç–∞–π–ª–∏–Ω–≥",
    "combo": "üéü –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —É—Å–ª—É–≥–∏"}



async def is_admin(user_id: int, session: AsyncSession) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –≤ –ë–î."""
    stmt = select(Admins).where(Admins.admin_id == user_id)
    result = await session.execute(stmt)
    return result.scalar_one_or_none() is not None




# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–∏–º–Ω–∞ –≤ –±–¥
async def orm_add_admin_to_db(
    admin_id: int,
    admin_name: str,
    actor_id: int,
    session: AsyncSession
) -> bool:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?
    existing_admin_result = await session.execute(
        select(Admins).where(Admins.admin_id == admin_id)
    )
    if existing_admin_result.scalar():
        return False

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
    new_admin = Admins(admin_id=admin_id, admin_name=admin_name)
    session.add(new_admin)
    await session.commit()
    return True



# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
async def get_admins_list(session: AsyncSession):
    result = await session.execute(select(Admins))
    admins = result.scalars().all()
    if not admins:
        return "‚ùå –í —Å–ø–∏—Å–∫–µ –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
    
    admins_text = "\n".join([f"üîπ <b>{admin.admin_name}</b> (ID: <code>{admin.admin_id}</code>)" for admin in admins])
    return f"üìã <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n\n{admins_text}"


# –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—è –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —á—Ç–æ –±—ã —É –Ω–µ—ë –≤—Å–µ–≥–¥–∞ –±—ã–ª –Ω–∞—á–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω
async def add_main_admin(session: AsyncSession):
    admin_id = 896957462  # ID –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∞–¥–º–∏–Ω –≤ –±–∞–∑–µ
    stmt = select(Admins).where(Admins.admin_id == admin_id)
    result = await session.execute(stmt)
    existing_admin = result.scalar_one_or_none()

    if not existing_admin:
        obj = Admins(admin_id=admin_id, admin_name="Admin")
        session.add(obj)
        await session.commit()
        print("–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        print("–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ.")




async def orm_get_admin_name_by_id(admin_id: int, session: AsyncSession):
    result = await session.execute(select(Admins).where(Admins.admin_id == admin_id))
    admin = result.scalars().first()
    return admin.admin_name if admin else None





async def orm_del_admin_by_id(
    admin_id: int,            # ID —É–¥–∞–ª—è–µ–º–æ–≥–æ –∞–¥–º–∏–Ω–∞
    session: AsyncSession
):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —É–¥–∞–ª—è–µ–º–æ–≥–æ –∞–¥–º–∏–Ω–∞
        result = await session.execute(select(Admins).where(Admins.admin_id == admin_id))
        admin = result.scalar_one_or_none()
        if not admin:
            return False

        # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await session.delete(admin)

        #
        
        await session.commit()
        return True
    except:
        return False
    




async def orm_add_barber(data, session: AsyncSession):
    existing_barber = await session.execute(
        select(Barbers).where(
            Barbers.name == data["name"],
            Barbers.phone == data["phone"]
        )
    )
    if existing_barber.scalars().first():
        return None, f"‚ö†Ô∏è –ë–∞—Ä–±–µ—Ä <b>{data['name']}</b> —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"

    new_barber = Barbers(
        name=data["name"],
        phone=data["phone"],
        experience=data.get("experience", 0),
        specialization=data["specialization"],
        photo_path=data.get("photo_path")
    )
    session.add(new_barber)
    await session.commit()
    await session.refresh(new_barber)

    return new_barber.id, f"‚úÖ –ë–∞—Ä–±–µ—Ä <b>{data['name']}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"





async def orm_add_service(data, session: AsyncSession) -> str:
    try:
        existing_service = await session.execute(
            select(Services).where(Services.service_name == data["name"])
        )
        if existing_service.scalars().first():
            return f"‚ö†Ô∏è –£—Å–ª—É–≥–∞ <b>{data['name']}</b> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"

        obj = Services(
            service_name=data["name"],
            service_price=data["price"],
            service_duration=data["duration"],
            service_category=data["category"]
        )
        session.add(obj)


        await session.commit()
        return f"‚úÖ –£—Å–ª—É–≥–∞ <b>{data['name']}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"

    except Exception as err:
        return False





async def orm_update_service(data: dict, session: AsyncSession) -> str:
    try:
        obj = data.get("obj")
        if not obj:
            return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É—Å–ª—É–≥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."

        stmt = (
            update(Services)
            .where(Services.id == obj.id)
            .values(
                service_name=data.get("name"),
                service_price=data.get("price"),
                service_duration=data.get("duration"),
                service_category=data.get("category")
            )
            .execution_options(synchronize_session="fetch")
        )

        await session.execute(stmt)

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        actor_id = data.get("actor_id")
        if actor_id:
            actor_result = await session.execute(select(Admins).where(Admins.admin_id == actor_id))
            actor = actor_result.scalar_one_or_none()
            actor_name = actor.admin_name if actor else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥–º–∏–Ω"

            log = AdminLog(
                admin_id=actor_id,
                admin_name=actor_name,
                action="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏",
                description=(
                    f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ª—É–≥–∞: ID ‚Äî {obj.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('name')}, "
                    f"–¶–µ–Ω–∞: {data.get('price')}, –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data.get('duration')}, "
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category')}"
                )
            )
            session.add(log)

        await session.commit()
        return f"‚úÖ –£—Å–ª—É–≥–∞ <b>{data['name']}</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"
    except Exception as ex:
        return False





# –°–≤—è–∑—å –±–∞—Ä–±–µ—Ä–∞ –∏ —É—Å–ª—É–≥–∏
async def orm_link_barber_to_service(session: AsyncSession, barber_id: int, service_id: int) -> bool:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–≤—è–∑–∫—É
    result = await session.execute(
        select(BarberService).where(
            BarberService.barber_id == barber_id,
            BarberService.service_id == service_id
        )
    )
    existing_link = result.scalar_one_or_none()
    
    if existing_link:
        return False  # –¢–∞–∫–∞—è —Å–≤—è–∑–∫–∞ —É–∂–µ –µ—Å—Ç—å

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–≤—è–∑–∫—É
    link = BarberService(barber_id=barber_id, service_id=service_id)
    session.add(link)
    try:
        await session.commit()
        return True
    except IntegrityError:
        await session.rollback()
        return False  # –í–¥—Ä—É–≥ –¥—É–±–ª—å –∏–∑-–∑–∞ –≥–æ–Ω–∫–∏





async def orm_get_services_by_barber_id(session: AsyncSession, barber_id: int):
    result = await session.execute(
        select(Services)
        .join(BarberService)
        .where(BarberService.barber_id == barber_id)
        .options(selectinload(Services.barbers))  # –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑—å
    )
    return result.scalars().all()





async def orm_update_barber_info(data: dict, session: AsyncSession) -> str:
    obj = data.get("obj")
    if not obj:
        return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É—Å–ª—É–≥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."

    stmt = (
        update(Barbers)
        .where(Barbers.id == obj.id)
        .values(
            name=data.get("name"),
            phone=data.get("phone"),
            experience=data.get("experience"),
            specialization=data.get("specialization"),
            photo_path=data.get("photo_path")
        )
        .execution_options(synchronize_session="fetch")
    )

    await session.execute(stmt)
    await session.commit()
    return f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞—Ä–±–µ—Ä–µ —Å –∏–º–µ–Ω–µ–º <b>{data["name"]}</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"





async def orm_update_barber_schedule(session: AsyncSession, barber_id: int, new_schedule: dict):
    await session.execute(
        delete(BarberSchedule).where(BarberSchedule.barber_id == barber_id)
    )

    for weekday, time_range in new_schedule.items():
        start_str, end_str = time_range.split("-")
        schedule = BarberSchedule(
            barber_id=barber_id,
            weekday=weekday,
            start_time=datetime.strptime(start_str, "%H:%M").time(),
            end_time=datetime.strptime(end_str, "%H:%M").time(),
        )
        session.add(schedule)

    await session.commit()





async def orm_get_services(session: AsyncSession, category: str):
    result = await session.execute(
        select(Services).where(Services.service_category == category)
    )

    services = result.scalars().all()
    return services  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Services





async def orm_get_all_barbers(session: AsyncSession):
    result = await session.execute(select(Barbers))
    barbers = result.scalars().all()
    return barbers  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Barbers





async def orm_delete_service_by_id(session: AsyncSession, service_id: int) -> str | None:
    service = await session.get(Services, service_id)
    if service:
        service_name = service.service_name

        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ —É—Å–ª—É–≥–∏ —Å –±–∞—Ä–±–µ—Ä–∞–º–∏
        await session.execute(
            delete(BarberService).where(BarberService.service_id == service_id)
        )

        # –£–¥–∞–ª—è–µ–º —Å–∞–º—É —É—Å–ª—É–≥—É
        await session.delete(service)
        await session.commit()

        return service_name

    return None





async def orm_delete_barber_by_id(session: AsyncSession, barber_id: int) -> str | None:
    barber = await session.get(Barbers, barber_id)
    if barber:
        barber_name = barber.name

        # –£–¥–∞–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –±–∞—Ä–±–µ—Ä–∞
        await session.execute(
            delete(BarberSchedule).where(BarberSchedule.barber_id == barber_id)
        )

        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ –±–∞—Ä–±–µ—Ä–∞ —Å —É—Å–ª—É–≥–∞–º–∏
        await session.execute(
            delete(BarberService).where(BarberService.barber_id == barber_id)
        )

        # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –±–∞—Ä–±–µ—Ä–∞
        await session.delete(barber)
        await session.commit()

        return barber_name

    return None





async def orm_get_service_by_id(session: AsyncSession, service_id: int):
    query = select(Services).where(Services.id == service_id)
    result = await session.execute(query)
    return result.scalar()





async def orm_get_barber_by_id(session: AsyncSession, barber_id: int):
    query = select(Barbers).where(Barbers.id == barber_id)
    result = await session.execute(query)
    return result.scalar()





# –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–∞—Ä–±–µ—Ä–∞
async def orm_get_barber_schedule_by_id(session: AsyncSession, barber_id: int) :
    result = await session.execute(
        select(BarberSchedule.weekday, BarberSchedule.start_time, BarberSchedule.end_time)
        .where(BarberSchedule.barber_id == barber_id)
    )
    schedule = {}
    for weekday, start_time, end_time in result.all():
        schedule[weekday] = (start_time, end_time)
    return schedule





async def orm_get_appointments_by_barber(session: AsyncSession, barber_id: int):
    result = await session.execute(
        select(Appointment.date_appointment, Appointment.time_appointment)
        .where(Appointment.barber_id == barber_id)
    )
    return result.all()  # –í–µ—Ä–Ω—ë—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (date, time)





async def orm_save_barber_schedule(session: AsyncSession, barber_id: int, schedule: dict[int, str]) -> None:
    def normalize_time_str(s: str) -> str:
        parts = s.split(":")
        if len(parts) != 2:
            return s
        hour, minute = parts
        hour = hour.zfill(2)
        return f"{hour}:{minute}"

    schedule_objs = []
    for weekday, time_range in schedule.items():
        try:
            start_str, end_str = time_range.split("-")
            start_str = normalize_time_str(start_str.strip())
            end_str = normalize_time_str(end_str.strip())
            start_time = time.fromisoformat(start_str)
            end_time = time.fromisoformat(end_str)
        except ValueError:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

        schedule_objs.append(
            BarberSchedule(
                barber_id=barber_id,
                weekday=weekday,
                start_time=start_time,
                end_time=end_time
            )
        )

    session.add_all(schedule_objs)
    await session.commit()





async def orm_unlink_service_from_barber(session: AsyncSession, barber_id: int, service_id: int):
    result = await session.execute(
        select(BarberService).where(
            BarberService.barber_id == barber_id,
            BarberService.service_id == service_id
        )
    )
    link = result.scalar_one_or_none()
    print("DEBUG: —Å–≤—è–∑—å –Ω–∞–π–¥–µ–Ω–∞:", link)

    if link:
        await session.execute(
            delete(BarberService).where(
                BarberService.barber_id == barber_id,
                BarberService.service_id == service_id
            )
        )
        await session.commit()
    else:
        print("DEBUG: —Å–≤—è–∑–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")





# –ø–æ–ª—É—á–Ω–µ–∏–µ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö –±–∞—Ä–±–µ—Ä–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–µ–∏–º–∞—é—Ç—Å—è –∫–æ–Ω–µ—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–æ–π
async def orm_get_barbers_by_service_id(session: AsyncSession, service_id: int):
    stmt = (
        select(Barbers)
        .join(Barbers.services)
        .where(Services.id == service_id)
    )
    result = await session.execute(stmt)
    return result.scalars().all()





# –ü–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–µ–∫—É—â–∏—Ö –¥–æ—Å—Ç–ø—É–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –∫–æ–Ω–µ—Ä–∫—Ç–Ω–æ–≥–æ –±–∞—Ä–±–µ—Ä–∞ –∏ —É—Å–ª—É–≥–∏ –Ω–∞ 14 –¥–Ω–µ–π
async def orm_get_available_dates(session, barber_id: int, service_id: int):


    result_dates = []
    today = datetime.now().date()
    service: Services = await session.get(Services, service_id)
    duration = timedelta(minutes=service.service_duration)

    for i in range(14):
        current_date = today + timedelta(days=i)
        weekday = current_date.weekday()

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±–∞—Ä–±–µ—Ä–∞ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        stmt = select(BarberSchedule).where(
            BarberSchedule.barber_id == barber_id,
            BarberSchedule.weekday == weekday
        )
        schedule = (await session.execute(stmt)).scalar_one_or_none()
        if not schedule:
            continue

        # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –∑–∞–Ω—è—Ç—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        appointments_stmt = select(Appointment.time_appointment).where(
            Appointment.barber_id == barber_id,
            Appointment.date_appointment == current_date
        )
        existing_times = {r[0] for r in (await session.execute(appointments_stmt)).all()}

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ—Ç–æ–≤
        slots = []
        current_time = datetime.combine(current_date, schedule.start_time)
        end_time = datetime.combine(current_date, schedule.end_time)

        while current_time + duration <= end_time:
            if current_time.time() not in existing_times:
                slots.append(current_time.time())
            current_time += duration

        if slots:
            result_dates.append(current_date)

    return result_dates





# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞—Ä—å
async def orm_get_free_time_slots(session: AsyncSession, barber_id: int, service_id: int, date_obj: date):
    weekday = date_obj.weekday()

    # –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã
    schedule_stmt = select(BarberSchedule).where(
        and_(
            BarberSchedule.barber_id == barber_id,
            BarberSchedule.weekday == weekday
        )
    )
    schedule_result = await session.execute(schedule_stmt)
    schedule: BarberSchedule | None = schedule_result.scalar_one_or_none()
    if not schedule:
        return []

    # –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏ (–¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ—Ç–æ–≤)
    service_stmt = select(Services.service_duration).where(Services.id == service_id)
    service_result = await session.execute(service_stmt)
    selected_service_duration: int = service_result.scalar_one_or_none()
    if selected_service_duration is None:
        return []

    #  —É–∂–µ –∑–∞–Ω—è—Ç—ã–µ –∑–∞–ø–∏—Å–∏ —Å –∏—Ö –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞—á–∞–ª–∞ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
    appointments_stmt = select(Appointment.time_appointment, Appointment.service_duration).where(
        and_(
            Appointment.barber_id == barber_id,
            Appointment.date_appointment == date_obj
        )
    )
    appointments_result = await session.execute(appointments_stmt)
    busy_slots = []
    for time_start, duration in appointments_result.all():
        start_dt = datetime.combine(date_obj, time_start)
        end_dt = start_dt + timedelta(minutes=duration)
        busy_slots.append((start_dt, end_dt))

    # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
    free_slots = []
    current_time = datetime.combine(date_obj, schedule.start_time)
    end_time = datetime.combine(date_obj, schedule.end_time)

    while current_time + timedelta(minutes=selected_service_duration) <= end_time:
        overlaps = any(start <= current_time < end for start, end in busy_slots)
        if not overlaps:
            free_slots.append(current_time.time())
        current_time += timedelta(minutes=30)  # –∏–ª–∏ –¥—Ä—É–≥–æ–π —à–∞–≥

    return free_slots





# –§–∏–Ω–∞–ª—å–Ω–æ–µ –¥–æ–±–æ–≤–ª–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É appointment –¥–∞–Ω–Ω—ã—Ö . –ê–¥–º–∏–Ω
async def orm_add_appontment_admin(
    session: AsyncSession,
    data: dict,
    date: date,
    time: time
) -> tuple[str, str | None, str | None]:

    try:
        service_id = int(data["service_id"])
        barber_id = int(data["barber_id"])

        service = await orm_get_service_by_id(session, service_id)
        barber = await orm_get_barber_by_id(session, barber_id)

        if not service or not barber:
            return "‚ùå –£—Å–ª—É–≥–∞ –∏–ª–∏ –±–∞—Ä–±–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å.", None, None

        # üîé –ù–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ —Å–ª–æ—Ç
        is_taken = await orm_check_barber_slot_taken(session, barber_id, date, time)
        if is_taken:
            return (
                "‚ö†Ô∏è –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ –≤—Ä–µ–º—è.", 
                None, None
            )

        # ‚úÖ –ï—Å–ª–∏ —Å–ª–æ—Ç —Å–≤–æ–±–æ–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å
        appointment = Appointment(
            client_name=data["client_name"],
            phone=data["phone"],
            date_appointment=date,
            time_appointment=time,
            service_id=service.id,
            service_name=service.service_name,
            service_price=float(service.service_price),
            service_duration=service.service_duration,
            barber_id=barber.id,
            barber_name=barber.name,
            status=AppointmentStatus.ADDED_BY_ADMIN
        )

        session.add(appointment)
        await session.commit()

        return "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", service.service_name, barber.name

    except Exception as ex:
        await session.rollback()
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {ex}", None, None
    




async def orm_get_available_dates_for_view_slots(session: AsyncSession, barber_id: int, days: int = 14) -> list[date]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∞—Ç, –∫–æ–≥–¥–∞ —É –±–∞—Ä–±–µ—Ä–∞ –µ—Å—Ç—å —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (–Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ N –¥–Ω–µ–π)."""
    today = date.today()
    available_dates = []

    for offset in range(days):
        target_date = today + timedelta(days=offset)
        weekday = target_date.weekday()

        stmt = select(BarberSchedule).where(
            and_(
                BarberSchedule.barber_id == barber_id,
                BarberSchedule.weekday == weekday
            )
        )
        result = await session.execute(stmt)
        schedule = result.scalar_one_or_none()

        if schedule and schedule.start_time != schedule.end_time:
            available_dates.append(target_date)

    return available_dates





# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ª–æ—Ç–æ–≤ –≤ –∞–¥–º–∏–Ω–∫–µ
async def orm_get_appointments_for_view_slots(session: AsyncSession, barber_id: int, date_obj: date):
    stmt = select(
        Appointment.id,
        Appointment.time_appointment,
        Appointment.client_name,
        Appointment.phone,
        Appointment.service_name,
        Appointment.service_duration,
        Appointment.status
    ).where(
        and_(
            Appointment.barber_id == barber_id,
            Appointment.date_appointment == date_obj
        )
    ).order_by(Appointment.time_appointment)

    result = await session.execute(stmt)
    return result.all()





# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ id
async def orm_delete_appointment_by_id(session: AsyncSession, appointment_id: int) -> bool:
    
    stmt = delete(Appointment).where(Appointment.id == appointment_id)
    result = await session.execute(stmt)
    await session.commit()
    return result.rowcount > 0  # True –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞





# –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∞
async def orm_log_admin_action(session: AsyncSession, admin_id: int, action: str, description: str):
    admin_name = await orm_get_admin_name_by_id(session=session, admin_id=admin_id)
    
    log = AdminLog(
        admin_id=admin_id,
        admin_name=admin_name if admin_name else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥–º–∏–Ω",
        action=action,
        description=description
    )
    session.add(log)
    await session.commit()





# –î–ª—è –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–æ–≤ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤–µ—Ä–º–µ–Ω–∏ 
async def orm_get_admin_logs(session: AsyncSession, start_date: datetime, end_date: datetime):
    # –û–±—Ä–µ–∑–∞–µ–º –≤—Ä–µ–º—è —É –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω–µ—Ü –¥–Ω—è –¥–ª—è –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
    start_dt = datetime.combine(start_date.date(), datetime.min.time())
    end_dt = datetime.combine(end_date.date(), datetime.max.time())

    stmt = (
        select(AdminLog)
        .where(
            and_(
                AdminLog.timestamp >= start_dt,
                AdminLog.timestamp <= end_dt
            )
        )
        .order_by(AdminLog.timestamp.asc())
    )
    result = await session.execute(stmt)
    logs = result.scalars().all()
    return logs





# –æ–±—ã—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
async def orm_add_appointment_user(
    session: AsyncSession,
    client_name: str,
    phone: str,
    date_str: str,
    time_str: str,
    service_id: int,
    barber_id: int
) -> tuple[bool, str, int | None]:
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        date_appointment = datetime.strptime(date_str, "%d.%m.%Y").date()
        time_appointment = datetime.strptime(time_str.replace("_", ":"), "%H:%M").time()

        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –∏ –±–∞—Ä–±–µ—Ä–∞
        service = await orm_get_service_by_id(session, service_id)
        barber = await orm_get_barber_by_id(session, barber_id)

        if not service or not barber:
            return False, "‚ùå –£—Å–ª—É–≥–∞ –∏–ª–∏ –±–∞—Ä–±–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å.", None

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Decimal -> float
        service_price = float(service.service_price) if service.service_price is not None else 0.0

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
        appointment = Appointment(
            client_name=client_name,
            phone=phone,
            date_appointment=date_appointment,
            time_appointment=time_appointment,
            service_id=service.id,
            service_name=service.service_name,
            service_price=service_price,
            service_duration=service.service_duration,
            barber_id=barber.id,
            barber_name=barber.name,
            status=AppointmentStatus.PENDING
        )

        session.add(appointment)
        await session.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response_message = (
            f"‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {date_appointment.strftime('%d.%m.%Y')}\n"
            f"‚è∞ <b>–í—Ä–µ–º—è:</b> {time_appointment.strftime('%H:%M')}\n"
            f"üíà <b>–ë–∞—Ä–±–µ—Ä:</b> {barber.name}\n"
            f"üõ† <b>–£—Å–ª—É–≥–∞:</b> {service.service_name}\n"
            f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {round(service_price, 2)} ‚ÇΩ"
        )

        return True, response_message, appointment.id

    except Exception as ex:
        await session.rollback()
        return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {ex}", None





# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏
async def orm_update_appointment_status(session: AsyncSession, appointment_id: int, new_status: AppointmentStatus):
    appointment = await session.get(Appointment, appointment_id)
    if appointment:
        appointment.status = new_status
        await session.commit()
        return True
    return False





async def orm_check_daily_limit(session: AsyncSession, phone: str, date: date, limit: int = 2) -> bool:
    result = await session.execute(
        select(func.count())
        .select_from(Appointment)
        .where(
            Appointment.phone == phone,
            Appointment.date_appointment == date
        )
    )
    count = result.scalar()
    return count >= limit





async def orm_get_user_by_id(session: AsyncSession, user_id: int):
    query = select(Users).where(Users.user_id == user_id)
    result = await session.execute(query)
    return result.scalar_one_or_none()





async def orm_add_user(session: AsyncSession, user_id: int, full_name: str, phone: str):
    user = Users(user_id=user_id, full_name=full_name, phone=phone)
    session.add(user)
    await session.commit()





async def orm_get_actual_appointments_by_user_id(session: AsyncSession, user_id: int) -> list[Appointment]:
    # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stmt_user = select(Users).where(Users.user_id == user_id)
    result_user = await session.execute(stmt_user)
    user = result_user.scalar_one_or_none()

    if not user:
        return []

    now = datetime.now()

    # –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –∑–∞–ø–∏—Å–∏ (–ª–∏–±–æ —Ç–µ–∫—É—â–∏–µ)
    stmt_appointments = (
        select(Appointment)
        .where(
            and_(
                Appointment.phone == user.phone,
                # –¥–∞—Ç–∞ –ø–æ–∑–∂–µ —Å–µ–≥–æ–¥–Ω—è, –∏–ª–∏ –µ—Å–ª–∏ –¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è ‚Äî –≤—Ä–µ–º—è –ø–æ–∑–∂–µ —Ç–µ–∫—É—â–µ–≥–æ
                (Appointment.date_appointment > now.date()) |
                ((Appointment.date_appointment == now.date()) &
                 (Appointment.time_appointment > now.time()))
            )
        )
        .order_by(Appointment.date_appointment, Appointment.time_appointment)
    )

    result_appointments = await session.execute(stmt_appointments)
    return result_appointments.scalars().all()





# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–Ω–æ–∂–Ω–æ(–∑–∞ 3 —á–∞—Å–∞ –¥–æ –∑–∞–ø–∏—Å–∏)
async def orm_delete_appointment_if_possible(session: AsyncSession, appointment_id: int) -> bool:
    stmt = select(Appointment).where(Appointment.id == appointment_id)
    result = await session.execute(stmt)
    appointment = result.scalar_one_or_none()

    if not appointment:
        return False  # —Ç–∞–∫–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç

    appointment_datetime = datetime.combine(appointment.date_appointment, appointment.time_appointment)
    now = datetime.now()

    if appointment_datetime - now < timedelta(hours=3):
        return False  # –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å ‚Äî –º–µ–Ω–µ–µ 3 —á–∞—Å–æ–≤

    # —É–¥–∞–ª–µ–Ω–∏–µ
    await session.delete(appointment)
    await session.commit()
    return True





# —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
async def orm_save_to_history(
    session: AsyncSession,
    client_name: str,
    phone: str,
    date_: date,
    time_: time,
    service_id: int,
    barber_id: int
):
    new_record = AppointmentHistory(
        client_name=client_name,
        phone=phone,
        date_appointment=date_,
        time_appointment=time_,
        service_id=service_id,
        barber_id=barber_id
    )
    session.add(new_record)
    await session.commit()






# –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–∞ –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
async def orm_slot_exists_in_history(session: AsyncSession, phone: str, date_: date, time_: time) -> bool:
    stmt = select(AppointmentHistory).where(
        AppointmentHistory.phone == phone,
        AppointmentHistory.date_appointment == date_,
        AppointmentHistory.time_appointment == time_
    )
    result = await session.execute(stmt)
    return result.scalar_one_or_none() is not None



async def orm_add_barber_rating(session: AsyncSession, barber_id: int, score: int):
    barber = await orm_get_barber_by_id(session, barber_id)
    if not barber:
        return False

    barber.rating_sum += score
    barber.rating_count += 1

    await session.commit()
    return True


async def orm_get_appointment_by_id(session: AsyncSession, appointment_id: int) -> Appointment | None:
    query = select(Appointment).where(Appointment.id == appointment_id)
    result = await session.execute(query)
    return result.scalar_one_or_none()






async def orm_check_barber_slot_taken(session: AsyncSession, barber_id: int, date_: date, time_: time) -> bool:
    result = await session.execute(
        select(Appointment)
        .where(Appointment.barber_id == barber_id)
        .where(Appointment.date_appointment == date_)
        .where(Appointment.time_appointment == time_)
        .where(Appointment.status != AppointmentStatus.CANCELLED)
    )
    return result.scalar() is not None



async def orm_add_barber_rating(
    session: AsyncSession,
    appointment_id: int,
    barber_id: int,
    user_id: int,
    score: int
):
    new_rating = BarberRatingHistory(
        appointment_id=appointment_id,
        barber_id=barber_id,
        user_id=user_id,
        score=score
    )
    session.add(new_rating)
    await session.commit()


async def orm_add_rating_decline(
    session: AsyncSession,
    appointment_id: int,
    barber_id: int,
    user_id: int
):
    new_decline = BarberRatingHistory(
        appointment_id=appointment_id,
        barber_id=barber_id,
        user_id=user_id,
        declined=True
    )
    session.add(new_decline)
    await session.commit()



async def orm_check_rating_exists(session: AsyncSession, appointment_id: int) -> bool:
    result = await session.execute(
        select(BarberRatingHistory).where(BarberRatingHistory.appointment_id == appointment_id)
    )
    return result.scalars().first() is not None


async def orm_check_user_double_booking(session, phone, date_, time_):
    stmt = select(Appointment).where(
        Appointment.phone == phone,
        Appointment.date_appointment == date_,
        Appointment.time_appointment == time_,
        Appointment.status != AppointmentStatus.CANCELLED
    )
    result = await session.execute(stmt)
    return result.scalars().first() is not None